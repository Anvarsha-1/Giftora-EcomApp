<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Giftora Admin Dashboard - User Listing</title>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
        }

        .main-wrapper {
            display: flex;
            min-height: 100vh;
            background-color: #f5f5f5;
        }

        .sidebar.collapsed+.content-wrapper {
            margin-left: 70px;
            width: calc(100% - 70px);
        }

        .navbar {
            background-color: white;
            padding: 15px 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 999;
        }

        .navbar-left {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .admin-icon {
            font-size: 1.2em;
            color: #2c3e50;
        }

        .admin-text {
            font-weight: 600;
            color: #2c3e50;
        }

        /* === Pagination Styles (from Order Management) === */
        .pagination-area {
            display: flex;
            gap: 20px;
            align-items: center;
            flex-wrap: wrap;
            justify-content: center;
            margin-top: 30px;
        }

        .pagination-controls {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .page-btn {
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            background: #fff;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            text-decoration: none;
            transition: all 0.2s ease;
        }

        .page-btn.active {
            background: #3b82f6;
            color: #fff;
            border-color: #3b82f6;
            font-weight: 600;
        }

        .page-btn:hover:not(.active):not([disabled]) {
            transform: translateY(-1px);
            border-color: #3b82f6;
        }

        .page-btn[disabled] {
            cursor: not-allowed;
        }

        @media (max-width: 768px) {
            .content-wrapper {
                margin-left: 70px;
                width: calc(100% - 70px);
            }
        }

        /* Responsive Card View */
        @media (max-width: 991.98px) {
            .table-responsive-cards thead {
                display: none;
            }
            .table-responsive-cards tbody,
            .table-responsive-cards tr,
            .table-responsive-cards td {
                display: block;
                width: 100%;
            }
            .table-responsive-cards tr {
                margin-bottom: 1rem;
                border: 1px solid #dee2e6;
                border-radius: .5rem;
                background-color: #fff;
                box-shadow: 0 1px 3px rgba(0,0,0,0.05);
            }
            .table-responsive-cards td {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: .75rem 1rem;
                border-bottom: 1px solid #f1f1f1;
                text-align: right;
            }
            .table-responsive-cards td:last-child {
                border-bottom: 0;
            }
            .table-responsive-cards td::before {
                content: attr(data-label);
                font-weight: 600;
                text-align: left;
                margin-right: 1rem;
                color: #495057;
            }
        }
    </style>
</head>

<body>
    <div class="main-wrapper">
        <!-- Sidebar Navigation -->
        <%-include('../partials/admin/header.ejs') %>

            <!-- User Listing Table -->
            <div class="content-wrapper p-3 p-md-4">
                <div class="navbar">
                    <div class="navbar-left">
                        <i class="fas fa-user-shield admin-icon"></i>
                        <span class="admin-text">Admin</span>
                    </div>
                </div>
                <div class="card shadow-sm mt-4">
                    <div class="card-body">
                        <h2 class="h4 fw-semibold mb-3">User Listing</h2>
                        <form action="/admin/users" method="GET" id="searchForm">
                            <div class="input-group mb-3">
                                <input type="text" id="searchInput" name="search" placeholder="Search users..." value="<%= search %>" class="form-control">
                                <button type="submit" class="btn btn-dark"><i class="fas fa-search"></i></button>
                                <button type="submit" class="btn btn-outline-secondary" name="clear" value="1"><i class="fas fa-times"></i></button>
                            </div>
                        </form>
                        <div class="table-responsive">
                        <table class="table table-hover align-middle table-responsive-cards">
                            <thead class="table-light">
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">First Name</th>
                                    <th scope="col">Last Name</th>
                                    <th scope="col">Email</th>
                                    <th scope="col">Phone</th>
                                    <th scope="col" class="text-center">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (users && users.length) { %>
                                    <% users.forEach((user, i) => { %>
                                        <tr>
                                            <td data-label="#">
                                                <%= (currentPage - 1) * 10 + i + 1 %>
                                            </td>
                                            <td data-label="First Name">
                                                <%= user.firstName %>
                                            </td>
                                            <td data-label="Last Name">
                                                <%= user.lastName %>
                                            </td>
                                            <td data-label="Email">
                                                <%= user.email %>
                                            </td>
                                            <td data-label="Phone">
                                                <%= user.phone || 'N/A' %>
                                            </td>
                                            <td data-label="Status" class="text-center">
                                                <% if (!user.isBlocked) { %>
                                                    <button class="btn btn-sm btn-outline-danger status-btn" data-userid="<%= user._id %>">
                                                        Block
                                                    </button>
                                                <% } else { %>
                                                    <button class="btn btn-sm btn-outline-success status-btn" data-userid="<%= user._id %>">
                                                        Unblock
                                                    </button>
                                                <% } %>
                                            </td>
                                        </tr>
                                    <% }) %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="6" class="text-center py-5 text-muted">No users found.</td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                        </div>
                        <div class="d-flex justify-content-center mt-4" id="pagination">
                            <nav>
                            <ul class="pagination">
                                <% if (typeof totalPages !=='undefined' && totalPages> 0) { %>
                                    <% if (currentPage > 1) { %>
                                        <li class="page-item"><a class="page-link" href="?page=<%= currentPage - 1 %>&search=<%= search %>" data-page="<%= currentPage - 1 %>">Prev</a></li>
                                    <% } else { %>
                                        <li class="page-item disabled"><a class="page-link" href="#">Prev</a></li>
                                    <% } %>
 
                                    <% for (let i = 1; i <= totalPages; i++) { %>
                                        <li class="page-item <%= i === currentPage ? 'active' : '' %>"><a class="page-link" href="?page=<%= i %>&search=<%= search %>" data-page="<%= i %>"><%= i %></a></li>
                                    <% } %>
 
                                    <% if (currentPage < totalPages) { %>
                                        <li class="page-item"><a class="page-link" href="?page=<%= currentPage + 1 %>&search=<%= search %>" data-page="<%= currentPage + 1 %>">Next</a></li>
                                    <% } else { %>
                                        <li class="page-item disabled"><a class="page-link" href="#">Next</a></li>
                                    <% } %>
                                <% } %>
                            </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const searchForm = document.getElementById("searchForm");
            const searchInput = document.getElementById("searchInput");

            // --- Core Function to Fetch and Render Users ---
            async function fetchAndRenderUsers(page = 1, search = '') {
                const url = `/admin/users?page=${page}&search=${encodeURIComponent(search)}`;
                try {
                    const response = await fetch(url, {
                        headers: { 'Accept': 'application/json' }
                    });
                    if (!response.ok) throw new Error('Network response was not ok');
                    
                    const data = await response.json();
                    renderTable(data.users);
                    renderPagination(data);
                    
                    // Update URL in browser history without reloading
                    const newUrl = `/admin/users?page=${data.currentPage}&search=${encodeURIComponent(data.search)}`;
                    history.pushState({ path: newUrl }, '', newUrl);

                } catch (error) {
                    console.error("Failed to fetch users:", error);
                    document.querySelector("tbody").innerHTML = `<tr><td colspan="6" class="text-center text-danger">Failed to load data.</td></tr>`;
                }
            }

            // --- Render Table Body ---
            function renderTable(users) {
                const tbody = document.querySelector("tbody");
                tbody.innerHTML = ''; // Clear existing rows
                if (!users || users.length === 0) {
                    tbody.innerHTML = `<tr><td colspan="6" class="text-center">No users found.</td></tr>`;
                    return;
                }
                users.forEach((user, index) => {
                    const row = `
                        <tr>
                            <td data-label="ID">${index + 1}</td>
                            <td data-label="First Name">${user.firstName}</td>
                            <td data-label="Last Name">${user.lastName}</td>
                            <td data-label="Email">${user.email}</td>
                            <td data-label="Phone Number">${user.phone || 'N/A'}</td>
                            <td data-label="Status">
                                <button class="status-btn ${user.isBlocked ? 'blocked' : 'unblocked'}" data-userid="${user._id}">
                                    <a>${user.isBlocked ? 'Unblock' : 'Block'}</a>
                                </button>
                            </td>
                        </tr>
                    `;
                    tbody.insertAdjacentHTML('beforeend', row);
                });
                // Re-attach event listeners to the new buttons
                attachBlockUnblockListeners();
            }

            // --- Render Pagination ---
            function renderPagination({ currentPage, totalPages, search }) {
                const paginationContainer = document.getElementById("pagination");
                paginationContainer.innerHTML = ''; // Clear existing pagination
                if (totalPages <= 0) return;

                let paginationHtml = '';
                
                if (currentPage > 1) {
                    paginationHtml += `<a href="#" class="page-btn" data-page="${currentPage - 1}">Prev</a>`;
                } else {
                    paginationHtml += `<button class="page-btn" disabled>Prev</button>`;
                }

                for (let i = 1; i <= totalPages; i++) {
                    paginationHtml += `<a href="#" class="page-btn ${i === currentPage ? 'active' : ''}" data-page="${i}">${i}</a>`;
                }

                if (currentPage < totalPages) {
                    paginationHtml += `<a href="#" class="page-btn" data-page="${currentPage + 1}">Next</a>`;
                } else {
                    paginationHtml += `<button class="page-btn" disabled>Next</button>`;
                }
                paginationContainer.innerHTML = paginationHtml;
            }

            // --- Event Handler for Block/Unblock ---
            function attachBlockUnblockListeners() {
                document.querySelectorAll(".status-btn").forEach(link => {
                    link.addEventListener('click', handleBlockUnblock);
                });
            }

            async function handleBlockUnblock(e) {
                e.preventDefault();
                const linkElement = e.currentTarget; // Store a reference to the link
                const button = e.currentTarget;
                const userId = button.dataset.userid;
                const url = `/admin/blockUser?id=${userId}`;
                const action = linkElement.textContent.trim().toLowerCase();
                
                Swal.fire({
                    title: `Are you sure you want to ${action} this user?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: `Yes, ${action} it!`,
                    cancelButtonText: 'Cancel'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        try {
                            const response = await fetch(url, { method: 'GET' }); // Assuming GET as per original href
                            const data = await response.json();

                            if (!response.ok) throw new Error(data.message || "Server error");

                            Swal.fire('Success!', data.message, 'success');

                            // Dynamically update the button
                            const isNowBlocked = action === 'block';
                            button.classList.toggle('btn-outline-danger', !isNowBlocked);
                            button.classList.toggle('btn-outline-success', isNowBlocked);
                            linkElement.textContent = isNowBlocked ? 'Unblock' : 'Block';

                        } catch (error) {
                            Swal.fire('Error!', error.message || 'Something went wrong.', 'error');
                        }
                    }
                });
            }

            // --- Event Listeners Setup ---
            searchForm.addEventListener("submit", (e) => {
                e.preventDefault();
                const isClear = e.submitter && e.submitter.name === "clear";
                const searchTerm = isClear ? '' : searchInput.value.trim();
                if (isClear) searchInput.value = '';
                fetchAndRenderUsers(1, searchTerm);
            });

            pagination.addEventListener('click', (e) => {
                e.preventDefault();
                if (e.target.tagName === 'A' && e.target.dataset.page) {
                    const page = parseInt(e.target.dataset.page, 10);
                    const currentSearch = searchInput.value.trim();
                    fetchAndRenderUsers(page, currentSearch);
                }
            });

            // Initial attachment of listeners
            attachBlockUnblockListeners();
        });
    </script>
</body>

</html>