<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Giftora Admin Dashboard - Product Listing</title>
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
  <meta http-equiv="Pragma" content="no-cache" />
  <meta http-equiv="Expires" content="0" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f5f5;
    }

    .main-wrapper {
      display: flex;
      min-height: 100vh;
      background-color: #f5f5f5;
    }

    .content-wrapper {
      flex: 1;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      margin-left: 250px;
      width: calc(100% - 250px);
      transition: margin-left 0.3s ease, width 0.3s ease;
    }

    .sidebar.collapsed+.content-wrapper {
      margin-left: 70px;
      width: calc(100% - 70px);
    }

    .navbar {
      background-color: white;
      padding: 15px 20px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: sticky;
      top: 0;
      z-index: 999;
    }

    .navbar-left {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .admin-icon {
      font-size: 1.2em;
      color: #2c3e50;
    }

    .admin-text {
      font-weight: 600;
      color: #2c3e50;
    }

    .search-add-section {
      padding: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 10px;
    }

    .search-container {
      display: flex;
      align-items: center;
      gap: 10px;
      flex: 1;
      max-width: 300px;
    }

    .search-input {
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      width: 100%;
    }

    .search-btn,
    .clear-btn {
      background-color: #2c3e50;
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.2s ease;
      font-size: 0.85rem;
    }

    .search-btn:hover {
      background-color: #34495e;
    }

    .clear-btn {
      background-color: #7f8c8d;
    }

    .clear-btn:hover {
      background-color: #95a5a6;
    }

    .add-product-btn {
      background-color: #2c3e50;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .add-product-btn:hover {
      background-color: #34495e;
    }

    .product-header {
      background-color: #2c3e50;
      color: white;
      padding: 10px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .filter-section {
      display: flex;
      gap: 10px;
    }

    .filter-section button {
      background-color: #34495e;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 4px;
      cursor: pointer;
      position: relative;
      font-size: 0.9rem;
      transition: background-color 0.2s ease;
    }

    .filter-section button:hover {
      background-color: #3d566e;
    }

    .dropdown-wrapper {
      position: relative;
    }

    .filter-dropdown {
      display: none;
      position: absolute;
      background-color: #34495e;
      border-radius: 4px;
      min-width: 120px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      top: 100%;
      left: 0;
      margin-top: 2px;
      opacity: 0;
      transform: translateY(-10px);
      transition: opacity 0.2s ease, transform 0.2s ease;
    }

    .filter-dropdown.active {
      display: block;
      opacity: 1;
      transform: translateY(0);
    }

    .filter-dropdown a {
      color: white;
      padding: 6px 10px;
      text-decoration: none;
      display: block;
      font-size: 0.85rem;
      transition: background-color 0.2s ease;
    }

    .filter-dropdown a:hover {
      background-color: #3d566e;
    }

    .product-table {
      width: 100%;
      border-collapse: collapse;
      background-color: white;
      margin-top: 10px;
    }

    .product-table th,
    .product-table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #e1e8ed;
      font-size: 0.95rem;
    }

    .product-table th {
      background-color: #f5f5f5;
      color: #2c3e50;
    }

    .product-table td img {
      width: 50px;
      height: 50px;
      object-fit: cover;
      background-color: #ddd;
    }

    .action-btn {
      background-color: #2c3e50;
      color: white;
      border: none;
      padding: 4px 8px;
      border-radius: 4px;
      cursor: pointer;
      margin-right: 5px;
      transition: background-color 0.2s ease;
      font-size: 0.85rem;
    }

    .action-btn.edit {
      background-color: #2c3e50;
    }

    .action-btn.edit:hover {
      background-color: #34495e;
    }

    .action-btn.delete {
      background-color: #e74c3c;
    }

    .action-btn.delete:hover {
      background-color: #c0392b;
    }

    .action-btn.block {
      background-color: #f39c12;
    }

    .action-btn.block:hover {
      background-color: #e67e22;
    }

    .action-btn.offer {
      background-color: #27ae60;
    }

    .action-btn.offer:hover {
      background-color: #2ecc71;
    }

    .status-listed {
      color: #27ae60;
      font-weight: 500;
    }

    .status-unlisted {
      color: #e74c3c;
      font-weight: 500;
    }

    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 5px;
      margin: 20px;
    }

    .pagination a {
      background-color: #2c3e50;
      color: white;
      padding: 8px 12px;
      border-radius: 4px;
      text-decoration: none;
      transition: background-color 0.2s ease, color 0.2s ease;
    }

    .pagination a:hover:not(.active):not(.disabled) {
      background-color: #34495e;
    }

    .pagination a.active {
      background-color: #557890 !important;
      color: #ffffff !important;
      font-weight: bold;
      box-shadow: 0 2px 4px rgba(189, 188, 188, 0.2);
    }

    .pagination a.disabled {
      background-color: #ddd;
      color: #888;
      cursor: not-allowed;
      pointer-events: none;
    }

    @media (max-width: 576px) {
      .content-wrapper {
        margin-left: 70px;
        width: calc(100% - 70px);
      }

      .sidebar.collapsed+.content-wrapper {
        margin-left: 70px;
        width: calc(100% - 70px);
      }

      .product-table th,
      .product-table td {
        padding: 6px;
        font-size: 0.8rem;
      }

      .product-table td img {
        width: 40px;
        height: 40px;
      }

      .search-container {
        max-width: 100%;
      }

      .search-input {
        width: 100%;
        margin-bottom: 10px;
      }

      .add-product-btn {
        width: 100%;
      }

      .filter-section button {
        width: 100%;
        margin-right: 0;
        margin-bottom: 5px;
        font-size: 0.8rem;
      }

      .filter-dropdown {
        min-width: 100px;
      }

      .filter-dropdown a {
        font-size: 0.75rem;
      }

      .pagination a {
        font-size: 0.75rem;
        padding: 3px 6px;
      }

      .action-btn {
        padding: 3px 6px;
        font-size: 0.75rem;
      }

      .search-add-section {
        flex-direction: column;
        align-items: stretch;
      }

      .search-btn,
      .clear-btn {
        width: 100%;
      }
    }

    @media (min-width: 577px) and (max-width: 768px) {
      .content-wrapper {
        margin-left: 70px;
        width: calc(100% - 70px);
      }

      .sidebar.collapsed+.content-wrapper {
        margin-left: 70px;
        width: calc(100% - 70px);
      }

      .product-table th,
      .product-table td {
        padding: 8px;
        font-size: 0.9rem;
      }

      .search-container {
        max-width: 200px;
      }

      .filter-section button {
        font-size: 0.85rem;
      }

      .filter-dropdown {
        min-width: 120px;
      }

      .filter-dropdown a {
        font-size: 0.8rem;
        cursor: pointer;
      }
    }
  </style>
</head>

<body>
  <div class="main-wrapper">
    <%- include('../partials/admin/header.ejs') %>
      <div class="content-wrapper">
        <div class="navbar">
          <div class="navbar-left">
            <i class="fas fa-user-shield admin-icon"></i>
            <span class="admin-text">Admin</span>
          </div>
        </div>

        <div class="search-add-section">
          <form id="searchForm" class="search-container">
            <input type="text" class="search-input" id="searchInput" name="search"
              value="<%= typeof search !== 'undefined' ? search : '' %>" placeholder="Search products..." />
            <button type="submit" class="search-btn"><i class="fas fa-search"></i></button>
            <button type="button" class="clear-btn" id="clearSearch"><i class="fas fa-times"></i></button>
          </form>
          <a href="/admin/addProducts">
            <button class="add-product-btn">Add Product</button>
          </a>
        </div>

        <div class="product-header">
          <div class="filter-section">
            <div class="dropdown-wrapper">
              <button id="categoryBtn">
                Product Category <i class="fas fa-caret-down"></i>
              </button>
              <div class="filter-dropdown" id="categoryDropdown">
                <a href="#" data-category="all">All Categories</a>
                <% cat.forEach(category=> { %>
                  <a href="#" data-category="<%= category.name %>">
                    <%= category.name %>
                  </a>
                  <% }) %>
              </div>
            </div>
            <div class="dropdown-wrapper">
              <button id="sortBtn">
                Sort <i class="fas fa-caret-down"></i>
              </button>
              <div class="filter-dropdown" id="sortDropdown">
                <a href="#" data-sort="price-high-low">Price High - Low</a>
                <a href="#" data-sort="price-low-high">Price Low - High</a>
              </div>
            </div>
          </div>
        </div>
        <table class="product-table">
          <thead>
            <tr>
              <th>Images</th>
              <th>Product Name</th>
              <th>Category</th>
              <th>Price</th>
              <th>Sales Price</th>
              <th>Quantity</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="productTbody">
            <% data.forEach(function(product) { %>
              <tr data-category="<%= product.category?.name %>">
                <td>
                  <% const firstImg=product.productImage[0]; %>
                    <% if (firstImg && firstImg.url) { %>
                      <img src="<%= firstImg.url %>" alt="Product Image" style="height: 60px; margin: 5px;" />
                      <% } else { %>
                        No image
                        <% } %>
                </td>
                <td>
                  <%= product.productName %>
                </td>
                <td>
                  <%= product.category?.name %>
                </td>
                <td>₹<%= product.regularPrice %>
                </td>
                <td>₹<%= product.salesPrice || 'N/A' %>
                </td>
                <td>
                  <%= product.quantity %>
                </td>
                <td>
                  <span class="status-label status-<%= product.isBlocked ? 'unlisted' : 'listed' %>">
                    <%= product.isBlocked ? 'Unlisted' : 'Listed' %>
                  </span>
                </td>

                <td>
                  <a href="/admin/editProduct/<%= product._id %>">
                    <button class="action-btn edit">Edit</button>
                  </a>
                  <button class="action-btn delete" data-id="<%= product._id %>">Delete</button>
                  <button class="action-btn block" data-id="<%= product._id %>"
                    data-status="<%= product.isBlocked ?  'unlisted' : 'listed' %>">
                    <%= product.isBlocked ? 'Unblock' :'Block' %>
                  </button>

                </td>
              </tr>
              <% }); %>
          </tbody>
        </table>

        <div id="paginationContainer">
          <% if (totalPages && totalPages>= 1) { %>
            <div class="pagination">
              <% const page=Number(currentPage) || 1; const total=Number(totalPages) || 1; const searchQuery=typeof
                search !=='undefined' ? encodeURIComponent(search) : '' ; %>
                <% if (page> 1) { %>
                  <a href="?page=<%= page - 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>" class="pag-link"
                    data-url="?page=<%= page - 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>">Previous</a>
                  <% } else { %>
                    <a class="disabled">Previous</a>
                    <% } %>
                      <% for (let i=1; i <=total; i++) { %>
                        <a href="?page=<%= i %><%= searchQuery ? '&search=' + searchQuery : '' %>"
                          class="<%= i===page ? 'active pag-link' : 'pag-link' %>"
                          data-url="?page=<%= i %><%= searchQuery ? '&search=' + searchQuery : '' %>">
                          <%= i %>
                        </a>
                        <% } %>
                          <% if (page < total) { %>
                            <a href="?page=<%= page + 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>"
                              class="pag-link"
                              data-url="?page=<%= page + 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>">Next</a>
                            <% } else { %>
                              <a class="disabled">Next</a>
                              <% } %>
            </div>
            <% } %>
        </div>
      </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script>
    let currentSearch = '<%= typeof search !== "undefined" ? search : "" %>';
    let currentPage = <%= Number(currentPage) || 1 %>;

    // Function to load products via fetch
    async function loadProducts(url) {
      try {
        const response = await fetch(url);
        if (!response.ok) throw new Error('Network response was not ok');
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');

        // Extract tbody
        const newTbody = doc.querySelector('#productTbody');
        if (newTbody) {
          document.getElementById('productTbody').innerHTML = newTbody.innerHTML;
        }

        // Extract pagination
        const newPagination = doc.querySelector('#paginationContainer');
        if (newPagination) {
          document.getElementById('paginationContainer').innerHTML = newPagination.innerHTML;
        }

        // Re-attach event listeners for new elements
        attachEventListeners();

        // Update URL without reload
        const urlObj = new URL(window.location);
        const params = new URLSearchParams(url.split('?')[1] || '');
        urlObj.search = params.toString();
        window.history.replaceState({}, '', urlObj);

      } catch (error) {
        console.error('Error loading products:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Failed to load products'
        });
      }
    }

    // Attach event listeners
    function attachEventListeners() {
      // Delete buttons
      document.querySelectorAll(".action-btn.delete").forEach((button) => {
        button.removeEventListener('click', handleDelete); // Remove previous listener if any
        button.addEventListener("click", handleDelete);
      });

      // Block buttons
      document.querySelectorAll(".action-btn.block").forEach((button) => {
        button.removeEventListener('click', handleToggleStatus); // Remove previous
        button.addEventListener("click", handleToggleStatus);
      });

      // Pagination links
      document.querySelectorAll(".pag-link").forEach((link) => {
        link.removeEventListener('click', handlePagination); // Remove previous
        link.addEventListener("click", handlePagination);
      });

      // Category and sort (these are client-side, no need to re-attach fully, but update rows)
      const tableRows = document.querySelectorAll(".product-table tbody tr");
      // Re-attach category filter if needed, but since it's client-side on current rows, it's fine
    }

    function handlePagination(e) {
      e.preventDefault();
      if (this.classList.contains("disabled")) return;

      const url = this.dataset.url || this.getAttribute('href');
      if (url) {
        loadProducts(url.startsWith('http') ? url : window.location.pathname + url);
      }
    }

    function handleDelete() {
      const id = this.dataset.id;
      deleteProduct(id);
    }

    function handleToggleStatus() {
      const id = this.dataset.id;
      const currentStatus = this.dataset.status;
      toggleProductStatus(id, currentStatus);
    }

    // Search form
    const searchForm = document.getElementById("searchForm");
    const searchInput = document.getElementById("searchInput");
    const clearSearch = document.getElementById("clearSearch");

    searchForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const searchTerm = searchInput.value.trim();
      const url = `/admin/products?page=1${searchTerm ? '&search=' + encodeURIComponent(searchTerm) : ''}`;
      await loadProducts(url);
    });

    clearSearch.addEventListener("click", async () => {
      searchInput.value = '';
      const url = '/admin/products?page=1';
      await loadProducts(url);
    });

    // Sidebar toggle
    window.addEventListener("sidebarToggle", (e) => {
      updateLayout(e.detail.collapsed);
    });

    // Initialize
    document.addEventListener("DOMContentLoaded", () => {
      const currentPath = window.location.pathname;
      const navLinks = document.querySelectorAll(".nav-item");
      navLinks.forEach((link) => {
        if (link.getAttribute("href") === currentPath) {
          link.classList.add("active");
        } else {
          link.classList.remove("active");
        }
      });

      // Initial attach
      attachEventListeners();

      // Initialize layout
      const isCollapsed = document.body.classList.contains("sidebar-collapsed");
      updateLayout(isCollapsed);

      // Category and sort filter handling (client-side on current data)
      const categoryBtn = document.getElementById("categoryBtn");
      const sortBtn = document.getElementById("sortBtn");
      const categoryDropdown = document.getElementById("categoryDropdown");
      const sortDropdown = document.getElementById("sortDropdown");

      let tableRows = document.querySelectorAll(".product-table tbody tr");

      function updateRows() {
        tableRows = document.querySelectorAll(".product-table tbody tr");
      }

      function toggleDropdown(dropdown) {
        const isActive = dropdown.classList.contains("active");
        document.querySelectorAll(".filter-dropdown").forEach((dd) => {
          dd.classList.remove("active");
        });
        if (!isActive) {
          dropdown.classList.add("active");
        }
      }

      categoryBtn.addEventListener("click", () => toggleDropdown(categoryDropdown));
      sortBtn.addEventListener("click", () => toggleDropdown(sortDropdown));

      document.addEventListener("click", (event) => {
        if (!event.target.closest(".dropdown-wrapper")) {
          categoryDropdown.classList.remove("active");
          sortDropdown.classList.remove("active");
        }
      });

      // Category filter
      document.querySelectorAll("#categoryDropdown a").forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          const category = link.dataset.category;
          tableRows.forEach((row) => {
            if (category === "all" || row.dataset.category === category) {
              row.style.display = "";
            } else {
              row.style.display = "none";
            }
          });
          categoryDropdown.classList.remove("active");
          updateRows();
        });
      });

      // Sort filter
      document.querySelectorAll("#sortDropdown a").forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          const sort = link.dataset.sort;
          const rows = Array.from(tableRows).filter(row => row.style.display !== 'none');
          rows.sort((a, b) => {
            const priceA = parseFloat(a.querySelector("td:nth-child(4)").textContent.replace('₹', ''));
            const priceB = parseFloat(b.querySelector("td:nth-child(4)").textContent.replace('₹', ''));
            return sort === "price-high-low" ? priceB - priceA : priceA - priceB;
          });
          const tbody = document.querySelector(".product-table tbody");
          rows.forEach((row) => tbody.appendChild(row));
          sortDropdown.classList.remove("active");
          updateRows();
        });
      });
    });

    // Responsive layout
    function updateLayout(isCollapsed = false) {
      const contentWrapper = document.querySelector(".content-wrapper");
      if (window.innerWidth <= 576) {
        contentWrapper.style.marginLeft = "70px";
        contentWrapper.style.width = "calc(100% - 70px)";
      } else if (window.innerWidth <= 768 || isCollapsed) {
        contentWrapper.style.marginLeft = "70px";
        contentWrapper.style.width = "calc(100% - 70px)";
      } else {
        contentWrapper.style.marginLeft = "250px";
        contentWrapper.style.width = "calc(100% - 250px)";
      }
    }
    window.addEventListener("resize", () => updateLayout(document.body.classList.contains("sidebar-collapsed")));


    function toggleProductStatus(id, currentStatus) {
      Swal.fire({
        title: `Are you sure you want to ${currentStatus === 'listed' ? 'block' : 'unblock'} this product?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#2c3e50',
        cancelButtonColor: '#e74c3c',
        confirmButtonText: 'Yes',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {

          $.ajax({
            url: `/admin/blockProduct/${id}`,
            method: 'PATCH',
            success: function (response) {
              if (response.success) {
                const button = document.querySelector(`.action-btn.block[data-id="${id}"]`);
                const statusCell = button.closest('tr').querySelector('.status-label');
                const isBlocked = response.product.isBlocked;

                const newStatus = isBlocked ? 'unlisted' : 'listed';

                button.dataset.status = newStatus;
                button.textContent = isBlocked ? 'Unblock' : 'Block';

                if (statusCell) {
                  statusCell.className = `status-label status-${newStatus}`;
                  statusCell.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
                }

                Swal.fire({
                  icon: 'success',
                  title: `Product ${isBlocked ? 'blocked' : 'unblocked'} successfully`,
                  showConfirmButton: false,
                  timer: 1500
                });
              } else {
                Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: response.message || 'Failed to update product status'
                });
              }
            },
            error: function () {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while updating product status'
              });
            }
          });
        }
      });
    }

    // Delete product function
    function deleteProduct(id) {
      Swal.fire({
        title: 'Are you sure you want to delete this product?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#2c3e50',
        cancelButtonColor: '#e74c3c',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          $.ajax({
            url: `/admin/deleteProduct/${id}`,
            method: 'DELETE',
            success: function (response) {
              if (response.success) {
                const row = document.querySelector(`.action-btn.delete[data-id="${id}"]`).closest('tr');
                row.remove();
                Swal.fire({
                  icon: 'success',
                  title: 'Deleted!',
                  text: 'Product has been deleted.',
                  showConfirmButton: false,
                  timer: 1500
                });
                // No reload, just remove row
              } else {
                Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: response.message || 'Failed to delete product'
                });
              }
            },
            error: function () {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while deleting the product'
              });
            }
          });
        }
      });
    }
  </script>

  <script>
    const modal = document.getElementById("offerModal");
    const closeModal = document.getElementById("closeModal");
    const saveOffer = document.getElementById("saveOffer");

    // Open modal when clicking "Add Offer"
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('action-btn') && e.target.classList.contains('offer')) {
        modal.classList.remove("hidden");
        modal.dataset.productId = e.target.dataset.id;
      }
    });

    // Close modal
    closeModal.addEventListener("click", () => {
      modal.classList.add("hidden");
    });

    // Save offer
    saveOffer.addEventListener("click", () => {
      const percentage = document.getElementById("offerPercentage").value;
      const productId = modal.dataset.productId;

      if (!percentage || percentage < 1 || percentage > 100) {
        alert("Enter a valid percentage (1-100)");
        return;
      }

      // Example: send via fetch
      fetch(`/admin/add-offer/${productId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ percentage })
      }).then(res => res.json())
        .then(data => {
          alert("Offer added successfully!");
          modal.classList.add("hidden");
        });
    });
  </script>


</body>

</html>