<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Giftora Admin Dashboard - Product Listing</title>
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
  <meta http-equiv="Pragma" content="no-cache" />
  <meta http-equiv="Expires" content="0" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f8f9fa;
    }

    .main-wrapper {
      display: flex;
      min-height: 100vh;
      background-color: #f5f5f5;
    }

    .content-wrapper {
      flex: 1;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      margin-left: 250px;
      width: calc(100% - 250px);
      transition: margin-left 0.3s ease, width 0.3s ease;
    }

    .sidebar.collapsed+.content-wrapper {
      margin-left: 70px;
      width: calc(100% - 70px);
    }

    .navbar {
      background-color: white;
      padding: 15px 20px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: sticky;
      top: 0;
      z-index: 999;
    }

    .navbar-left {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .admin-icon {
      font-size: 1.2em;
      color: #2c3e50;
    }

    .admin-text {
      font-weight: 600;
      color: #2c3e50;
    }

    .product-header {
      background-color: #fff;
      padding: 1rem;
      border-radius: 0.5rem;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      border: 1px solid #dee2e6;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .filter-section {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .table-container {
      background-color: #fff;
      border-radius: 0.5rem;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      overflow-x: auto;
      border: 1px solid #dee2e6;
    }

    .product-table {
      width: 100%;
      border-collapse: collapse;
      background-color: white;
      margin-top: 10px;
    }

    .product-table th,
    .product-table td {
      padding: 12px;
      vertical-align: middle;
      border-bottom: 1px solid #e1e8ed;
      font-size: 0.95rem;
      white-space: nowrap;
    }

    .product-table th {
      background-color: #f8f9fa;
      color: #2c3e50;
    }

    .product-table td img {
      width: 50px;
      height: 50px;
      object-fit: cover;
      border-radius: 0.25rem;
    }

    .action-buttons {
      display: flex;
      gap: 0.5rem;
    }

    .status-listed {
      color: #27ae60;
      font-weight: 500;
    }

    .status-unlisted {
      color: #e74c3c;
      font-weight: 500;
    }

    /* Responsive Table / Card View */
    @media (max-width: 768px) {
      .content-wrapper {
        margin-left: 70px;
        width: calc(100% - 70px);
      }
      .product-table thead {
        display: none;
      }
      .product-table, .product-table tbody, .product-table tr {
        display: block;
        width: 100%;
      }
      .product-table tr {
        background-color: #fff;
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      }
      .product-table td {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #f1f1f1;
        text-align: right;
        white-space: normal;
      }
      .product-table td:last-child {
        border-bottom: none;
      }
      .product-table td::before {
        content: attr(data-label);
        font-weight: 600;
        color: #2c3e50;
        text-align: left;
        margin-right: 1rem;
      }
      .product-table td:first-child {
        flex-direction: column;
        align-items: flex-start;
      }
      .product-table td:first-child img {
        width: 100%;
        height: auto;
        max-height: 200px;
        margin-top: 0.5rem;
      }
    }
  </style>
</head>

<body>
  <div class="main-wrapper">
    <%- include('../partials/admin/header.ejs') %>
      <div class="content-wrapper">
        <div class="navbar">
          <div class="navbar-left">
            <i class="fas fa-user-shield admin-icon"></i>
            <span class="admin-text">Admin</span>
          </div>
        </div>

        <div class="p-3">
          <div class="product-header mb-3">
            <form id="searchForm" class="flex-grow-1">
              <div class="input-group">
                <input type="text" class="form-control" id="searchInput" name="search" value="<%= typeof search !== 'undefined' ? search : '' %>" placeholder="Search products..." />
                <button type="submit" class="btn btn-dark"><i class="fas fa-search"></i></button>
                <button type="button" class="btn btn-outline-secondary" id="clearSearch"><i class="fas fa-times"></i></button>
              </div>
            </form>
            <div class="filter-section">
              <div class="dropdown">
                <button class="btn btn-outline-dark dropdown-toggle" type="button" id="categoryBtn" data-bs-toggle="dropdown" aria-expanded="false">
                  Category
                </button>
                <ul class="dropdown-menu" aria-labelledby="categoryBtn" id="categoryDropdown">
                  <li><a class="dropdown-item" href="#" data-category="all">All Categories</a></li>
                  <% cat.forEach(category=> { %>
                    <li><a class="dropdown-item" href="#" data-category="<%= category.name %>"><%= category.name %></a></li>
                  <% }) %>
                </ul>
              </div>
              <div class="dropdown">
                <button class="btn btn-outline-dark dropdown-toggle" type="button" id="sortBtn" data-bs-toggle="dropdown" aria-expanded="false">
                  Sort
                </button>
                <ul class="dropdown-menu" aria-labelledby="sortBtn" id="sortDropdown">
                  <li><a class="dropdown-item" href="#" data-sort="price-high-low">Price High - Low</a></li>
                  <li><a class="dropdown-item" href="#" data-sort="price-low-high">Price Low - High</a></li>
                </ul>
              </div>
            </div>
            <a href="/admin/addProducts" class="btn btn-primary">
              <i class="fas fa-plus"></i> Add Product
            </a>
          </div>

          <div class="table-container">
          <table class="table table-hover product-table">
          <thead>
            <tr>
              <th scope="col">Images</th>
              <th scope="col">Product Name</th>
              <th scope="col">Category</th>
              <th scope="col">Price</th>
              <th scope="col">Sales Price</th>
              <th scope="col">Quantity</th>
              <th scope="col">Status</th>
              <th scope="col">Actions</th>
            </tr>
          </thead>
          <tbody id="productTbody">
            <% data.forEach(function(product) { %>
              <tr data-category="<%= product.category?.name %>">
                <td data-label="Image">
                  <% const firstImg=product.productImage[0]; %>
                    <% if (firstImg && firstImg.url) { %>
                      <img src="<%= firstImg.url %>" alt="Product Image" style="height: 60px; margin: 5px;" />
                      <% } else { %>
                        No image
                        <% } %>
                </td>
                <td data-label="Product Name">
                  <%= product.productName %>
                </td>
                <td data-label="Category">
                  <%= product.category?.name %>
                </td>
                <td data-label="Price">₹<%= product.regularPrice %>
                </td>
                <td data-label="Sales Price">₹<%= product.salesPrice || 'N/A' %>
                </td>
                <td data-label="Quantity">
                  <%= product.quantity %>
                </td>
                <td data-label="Status">
                  <span class="status-label status-<%= product.isBlocked ? 'unlisted' : 'listed' %>">
                    <%= product.isBlocked ? 'Unlisted' : 'Listed' %>
                  </span>
                </td>

                <td data-label="Actions">
                  <div class="action-buttons">
                    <a href="/admin/editProduct/<%= product._id %>" class="btn btn-sm btn-outline-primary" title="Edit">
                      <i class="fas fa-edit"></i>
                    </a>
                    <button class="btn btn-sm btn-outline-danger delete" data-id="<%= product._id %>" title="Delete">
                      <i class="fas fa-trash"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-secondary block" data-id="<%= product._id %>" data-status="<%= product.isBlocked ? 'unlisted' : 'listed' %>" title="<%= product.isBlocked ? 'Unblock' : 'Block' %>">
                      <i class="fas fa-<%= product.isBlocked ? 'check-circle' : 'ban' %>"></i>
                    </button>
                  </div>
                </td>
              </tr>
              <% }); %>
          </tbody>
        </table>
        </div>
        <div id="paginationContainer">
          <% if (totalPages && totalPages>= 1) { %>
            <nav class="mt-4">
            <ul class="pagination justify-content-center">
              <% const page=Number(currentPage) || 1; const total=Number(totalPages) || 1; const searchQuery=typeof
                search !=='undefined' ? encodeURIComponent(search) : '' ; %>
                <% if (page> 1) { %>
                  <li class="page-item"><a class="page-link pag-link" href="?page=<%= page - 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>" data-url="?page=<%= page - 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>">Previous</a></li>
                  <% } else { %>
                    <li class="page-item disabled"><a class="page-link" href="#">Previous</a></li>
                    <% } %>
                      <% for (let i=1; i <=total; i++) { %>
                        <li class="page-item <%= i===page ? 'active' : '' %>"><a class="page-link pag-link" href="?page=<%= i %><%= searchQuery ? '&search=' + searchQuery : '' %>" data-url="?page=<%= i %><%= searchQuery ? '&search=' + searchQuery : '' %>"><%= i %></a></li>
                        <% } %>
                          <% if (page < total) { %>
                            <li class="page-item"><a class="page-link pag-link" href="?page=<%= page + 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>" data-url="?page=<%= page + 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>">Next</a></li>
                            <% } else { %>
                              <li class="page-item disabled"><a class="page-link" href="#">Next</a></li>
                              <% } %>
            </ul>
            </nav>
            <% } %>
        </div>
      </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Initialize
    document.addEventListener("DOMContentLoaded", () => {
      let currentSearch = '<%= typeof search !== "undefined" ? search : "" %>';
      let currentPage = <%= Number(currentPage) || 1 %>;

      // Function to load products via fetch
      async function loadProducts(url) {
        try {
          const response = await fetch(url);
          if (!response.ok) throw new Error('Network response was not ok');
          const html = await response.text();
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');

          const newTbody = doc.querySelector('#productTbody');
          if (newTbody) {
            document.getElementById('productTbody').innerHTML = newTbody.innerHTML;
          }

          const newPagination = doc.querySelector('#paginationContainer');
          if (newPagination) {
            document.getElementById('paginationContainer').innerHTML = newPagination.innerHTML;
          }

          attachEventListeners();

          const urlObj = new URL(window.location);
          const params = new URLSearchParams(url.split('?')[1] || '');
          urlObj.search = params.toString();
          window.history.replaceState({}, '', urlObj);

        } catch (error) {
          console.error('Error loading products:', error);
          Swal.fire({ icon: 'error', title: 'Error', text: 'Failed to load products' });
        }
      }

      function attachEventListeners() {
        document.querySelectorAll(".action-btn.delete, .delete").forEach(button => {
          button.removeEventListener('click', handleDelete);
          button.addEventListener("click", handleDelete);
        });

        document.querySelectorAll(".action-btn.block, .block").forEach(button => {
          button.removeEventListener('click', handleToggleStatus);
          button.addEventListener("click", handleToggleStatus);
        });

        document.querySelectorAll(".pag-link").forEach(link => {
          link.removeEventListener('click', handlePagination);
          link.addEventListener("click", handlePagination);
        });
      }

      function handlePagination(e) {
        e.preventDefault();
        if (this.closest('.page-item.disabled')) return;
        const url = this.dataset.url || this.getAttribute('href');
        if (url) {
          loadProducts(url.startsWith('http') ? url : window.location.pathname + url);
        }
      }

      function handleDelete() {
        const id = this.dataset.id;
        deleteProduct(id);
      }

      function handleToggleStatus() {
        const id = this.dataset.id;
        const currentStatus = this.dataset.status;
        toggleProductStatus(id, currentStatus);
      }

      const searchForm = document.getElementById("searchForm");
      const searchInput = document.getElementById("searchInput");
      const clearSearch = document.getElementById("clearSearch");

      if(searchForm) {
        searchForm.addEventListener("submit", async (e) => {
          e.preventDefault();
          const searchTerm = searchInput.value.trim();
          const url = `/admin/products?page=1${searchTerm ? '&search=' + encodeURIComponent(searchTerm) : ''}`;
          await loadProducts(url);
        });
      }

      if(clearSearch) {
        clearSearch.addEventListener("click", async () => {
          searchInput.value = '';
          const url = '/admin/products?page=1';
          await loadProducts(url);
        });
      }

      window.addEventListener("sidebarToggle", (e) => {
        updateLayout(e.detail.collapsed);
      });

      const currentPath = window.location.pathname;
      const navLinks = document.querySelectorAll(".nav-item");
      navLinks.forEach((link) => {
        if (link.getAttribute("href") === currentPath) {
          link.classList.add("active");
        } else {
          link.classList.remove("active");
        }
      });

      // Initial attach
      attachEventListeners();

      // Category and sort filter handling (client-side on current data)
      const categoryBtn = document.getElementById("categoryBtn");
      const sortBtn = document.getElementById("sortBtn");
      const categoryDropdown = document.getElementById("categoryDropdown");
      const sortDropdown = document.getElementById("sortDropdown");

      let tableRows = document.querySelectorAll(".product-table tbody tr");

      function updateRows() {
        tableRows = document.querySelectorAll(".product-table tbody tr");
      }

      // Category filter
      document.querySelectorAll("#categoryDropdown a").forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          const categoryValue = link.dataset.category;
          const currentParams = new URLSearchParams(window.location.search);
          currentParams.set('page', '1');
          currentParams.set('category', categoryValue);
          loadProducts(`/admin/products?${currentParams.toString()}`);
        });
      });

      // Sort filter
      document.querySelectorAll("#sortDropdown a").forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          const sortValue = link.dataset.sort;
          const currentParams = new URLSearchParams(window.location.search);
          currentParams.set('page', '1');
          currentParams.set('sort', sortValue);
          loadProducts(`/admin/products?${currentParams.toString()}`);
        });
      });    
    });

    function toggleProductStatus(id, currentStatus) {
      Swal.fire({
        title: `Are you sure you want to ${currentStatus === 'listed' ? 'block' : 'unblock'} this product?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#2c3e50',
        cancelButtonColor: '#e74c3c',
        confirmButtonText: 'Yes',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {

          $.ajax({
            url: `/admin/blockProduct/${id}`,
            method: 'PATCH',
            success: function (response) {
              if (response.success) {
                const button = $(`.block[data-id="${id}"]`);
                const statusCell = button.closest('tr').find('.status-label');
                const isBlocked = response.product.isBlocked;

                const newStatus = isBlocked ? 'unlisted' : 'listed';
                const newButtonTitle = isBlocked ? 'Unblock' : 'Block';
                const newIconClass = isBlocked ? 'fa-check-circle' : 'fa-ban';

                button.data('status', newStatus);
                button.attr('title', newButtonTitle);
                button.find('i').removeClass('fa-ban fa-check-circle').addClass(newIconClass);
                
                if (statusCell) { // Check if statusCell exists
                  statusCell.className = `status-label status-${newStatus}`;
                  statusCell.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
                }

                Swal.fire({
                  icon: 'success',
                  title: `Product ${isBlocked ? 'blocked' : 'unblocked'} successfully`,
                  showConfirmButton: false,
                  timer: 1500
                });
              } else {
                Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: response.message || 'Failed to update product status'
                });
              }
            },
            error: function () {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while updating product status'
              });
            }
          });
        }
      });
    }

    // Delete product function
    function deleteProduct(id) {
      Swal.fire({
        title: 'Are you sure you want to delete this product?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#2c3e50',
        cancelButtonColor: '#e74c3c',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          $.ajax({
            url: `/admin/deleteProduct/${id}`,
            method: 'DELETE',
            success: function (response) {
              if (response.success) {
                const row = document.querySelector(`.delete[data-id="${id}"]`).closest('tr');
                row.remove();
                Swal.fire({
                  icon: 'success',
                  title: 'Deleted!',
                  text: 'Product has been deleted.',
                  showConfirmButton: false,
                  timer: 1500
                });
                // No reload, just remove row
              } else {
                Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: response.message || 'Failed to delete product'
                });
              }
            },
            error: function () {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while deleting the product'
              });
            }
          });
        }
      });
    }
  </script>

  <script>
    const modal = document.getElementById("offerModal");
    const closeModal = document.getElementById("closeModal");
    const saveOffer = document.getElementById("saveOffer");

    // Open modal when clicking "Add Offer"
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('action-btn') && e.target.classList.contains('offer')) {
        modal.classList.remove("hidden");
        modal.dataset.productId = e.target.dataset.id;
      }
    });

    // Close modal
    closeModal.addEventListener("click", () => {
      modal.classList.add("hidden");
    });

    // Save offer
    saveOffer.addEventListener("click", () => {
      const percentage = document.getElementById("offerPercentage").value;
      const productId = modal.dataset.productId;

      if (!percentage || percentage < 1 || percentage > 100) {
        alert("Enter a valid percentage (1-100)");
        return;
      }

      // Example: send via fetch
      fetch(`/admin/add-offer/${productId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ percentage })
      }).then(res => res.json())
        .then(data => {
          alert("Offer added successfully!");
          modal.classList.add("hidden");
        });
    });
  </script>


</body>

</html>