<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Giftora Admin Dashboard - Category Management</title>
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
  <meta http-equiv="Pragma" content="no-cache" />
  <meta http-equiv="Expires" content="0" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
  <style>
    body {
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f5f5;
    }

    .main-wrapper {
      display: flex;
      min-height: 100vh;
      background-color: #f5f5f5;
    }

    .content-wrapper {
      flex: 1;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      margin-left: 250px;
      width: calc(100% - 250px);
      transition: margin-left 0.3s ease, width 0.3s ease;
    }

    .sidebar.collapsed+.content-wrapper {
      margin-left: 70px;
      width: calc(100% - 70px);
    }

    .navbar {
      background-color: white;
      padding: 15px 20px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: sticky;
      top: 0;
      z-index: 999;
    }

    .navbar-left {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .admin-icon {
      font-size: 1.2em;
      color: #2c3e50;
    }

    .admin-text {
      font-weight: 600;
      color: #2c3e50;
    }

    .search-container {
      display: flex;
      gap: 10px;
      margin: 20px;
    }

    .search-container input {
      flex: 1;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }

    .search-container button {
      background-color: #2c3e50;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .search-container button:hover {
      background-color: #34495e;
    }

    .search-container button.clear-btn {
      background-color: #6c757d;
    }

    .search-container button.clear-btn:hover {
      background-color: #5a6268;
    }

    .category-table {
      width: 100%;
      border-collapse: collapse;
      background-color: white;
      margin: 20px;
    }

    .category-table th,
    .category-table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #e1e8ed;
      font-size: 0.95rem;
    }

    .category-table th {
      background-color: #f5f5f5;
      color: #2c3e50;
    }

    .action-btn {
      background-color: #2c3e50;
      color: white;
      border: none;
      padding: 4px 8px;
      border-radius: 4px;
      cursor: pointer;
      margin-right: 5px;
      transition: background-color 0.2s ease;
      font-size: 0.85rem;
    }
    

    .action-btn:hover {
      background-color: #34495e;
    }

    .action-btn.delete {
      background-color: #dc3545;
    }

    .action-btn.delete:hover {
      background-color: #c82333;
    }

    .list-button {
      text-decoration: none;
      background-color: #0cbe23;
      color: white;
      padding: 6px 12px;
      cursor: pointer;
      border-radius: 4px;
      font-size: 14px;
      font-weight: bold;
      display: inline-block;
      transition: background-color 0.3s ease;
    }

    .list-button:hover {
      background-color: #1eb300;
      text-decoration: none;
    }

    .list-button.list {
      background-color: #28a745;
    }

    .list-button.unlist {
      background-color: #dc3545;
    }

    .list-button.list:hover {
      background-color: #218838;
    }

    .list-button.unlist:hover {
      background-color: #c82333;
    }

    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 5px;
      margin: 20px;
    }

    .pagination a {
      background-color: #2c3e50;
      color: white;
      padding: 8px 12px;
      border-radius: 4px;
      text-decoration: none;
      transition: background-color 0.2s ease;
    }

    .pagination a:hover {
      background-color: #34495e;
    }

    .pagination a.active {
      background-color: #34495e;
      font-weight: bold;
    }

    .pagination a.disabled {
      background-color: #ddd;
      color: #888;
      cursor: not-allowed;
      pointer-events: none;
    }

    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.6);
      z-index: 1000;
      justify-content: center;
      align-items: center;
      animation: fadeIn 0.3s ease;
    }

    .modal-content {
      background-color: #fff;
      padding: 0;
      border-radius: 8px;
      width: 450px;
      max-width: 90%;
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
      overflow: hidden;
      transform: scale(0.9);
      animation: popIn 0.3s ease forwards;
    }

    .modal-header {
      background: linear-gradient(135deg, #2c3e50, #34495e);
      color: white;
      padding: 15px 20px;
      border-radius: 8px 8px 0 0;
    }

    .modal-content h2 {
      margin: 0;
      font-size: 1.5rem;
    }

    .modal-body {
      padding: 20px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      color: #2c3e50;
      font-weight: 500;
    }

    .form-group input,
    .form-group textarea {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 0.95rem;
      transition: border-color 0.2s ease;
    }

    .form-group input:focus,
    .form-group textarea:focus {
      border-color: #2c3e50;
      outline: none;
    }

    .form-group textarea {
      height: 100px;
      resize: vertical;
    }

    .form-actions {
      display: flex;
      gap: 10px;
      justify-content: flex-end;
      padding: 0 20px 20px;
    }

    .form-actions button {
      background-color: #2c3e50;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.2s ease;
      font-size: 0.95rem;
    }

    .form-actions button:hover {
      background-color: #34495e;
    }

    .form-actions .cancel-btn {
      background-color: #6c757d;
    }

    .form-actions .cancel-btn:hover {
      background-color: #5a6268;
    }

    .error-message {
      color: #dc3545;
      font-size: 0.85rem;
      margin-top: 5px;
      display: none;
    }

    .add-category-btn {
      background-color: #2c3e50;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      margin: 20px;
      transition: background-color 0.2s ease;
      font-size: 1rem;
    }

    .add-category-btn:hover {
      background-color: #34495e;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }

      to {
        opacity: 1;
      }
    }

    @keyframes popIn {
      from {
        transform: scale(0.9);
      }

      to {
        transform: scale(1);
      }
    }

    @media (max-width: 768px) {
      .content-wrapper {
        margin-left: 70px;
        width: calc(100% - 70px);
      }

      .category-table th,
      .category-table td {
        padding: 8px;
        font-size: 0.85rem;
      }

      .form-actions button {
        padding: 8px 16px;
        font-size: 0.9rem;
      }

      .search-container,
      .pagination {
        margin: 10px;
      }
    }

    @media (max-width: 576px) {
      .content-wrapper {
        margin-left: 0;
        width: 100%;
      }

      .navbar {
        padding: 10px;
      }

      .category-table th,
      .category-table td {
        padding: 6px;
        font-size: 0.75rem;
      }

      .search-container {
        flex-direction: column;
      }

      .search-container button {
        width: 100%;
      }

      .modal-content {
        width: 95%;
      }

      .add-category-btn {
        margin: 10px;
        width: calc(100% - 20px);
      }
    }
  </style>
</head>

<body>
  <div class="main-wrapper">
    <%- include('../partials/admin/header.ejs') %>
      <div class="content-wrapper">
        <div class="navbar">
          <div class="navbar-left">
            <i class="fas fa-user-shield admin-icon"></i>
            <span class="admin-text">Admin</span>
          </div>
        </div>
        <button class="add-category-btn" onclick="openCategoryModal('add')">Add Category</button>
        <div class="search-container">
          <form id="searchForm" style="display: contents;">
            <input type="text" id="searchInput" name="search" placeholder="Search Categories..."
              value="<%= typeof search !== 'undefined' ? search : '' %>" />
            <button type="submit" class="search-btn"><i class="fas fa-search"></i></button>
            <button type="button" id="clearBtn" class="clear-btn"><i class="fas fa-times"></i></button>
          </form>
        </div>
        <table class="category-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>Category Name</th>
              <th>Category Description</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="categoryTableBody">
            <% cat.forEach((category, index)=> { %>
              <tr>
                <td>
                  <%= index + 1 %>
                </td>
                <td>
                  <%= category.name %>
                </td>
                <td>
                  <%= category.description %>
                </td>
                <td>
                  <%= category.isListed ? 'Listed' : 'Unlisted' %>
                </td>
                <td>
                  <a href="#" onclick="toggleCategory(event, '<%= category._id %>','<%= category.isListed %>')"
                    class="list-button <%= category.isListed ? 'unlist' : 'list' %>">
                    <%= category.isListed ? 'Unlist' : 'List' %>
                  </a>
                  <button class="action-btn edit" data-id="<%= category._id %>"
                    data-name="<%= category.name.replace(/'/g, " \\'") %>"
                    data-description="<%= category.description.replace(/'/g, "\\'" ) %>"
                      data-offerpercentage="<%= category.categoryOffer|| 0 %>">
                        Edit
                  </button>
                  <button class="action-btn delete" data-id="<%= category._id %>">
                    Delete
                  </button>
                </td>
              </tr>
              <% }) %>
          </tbody>
        </table>
        <div id="paginationContainer" class="pagination">
          <% const total=Number(totalPages) || 1; const searchQuery=typeof search !=='undefined' ?
            encodeURIComponent(search) : '' ; %>
            <% if (currentPage> 1) { %>
              <a href="?page=<%= currentPage - 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>">Previous</a>
              <% } else { %>
                <a class="disabled">Previous</a>
                <% } %>
                  <% for (let i=1; i <=total; i++) { %>
                    <a href="?page=<%= i %><%= searchQuery ? '&search=' + searchQuery : '' %>" <%=i===currentPage
                      ? 'class="active"' : '' %>><%= i %></a>
                    <% } %>
                      <% if (currentPage < total) { %>
                        <a
                          href="?page=<%= currentPage + 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>">Next</a>
                        <% } else { %>
                          <a class="disabled">Next</a>
                          <% } %>
        </div>
      </div>
      <div id="categoryModal" class="modal">
        <div class="modal-content">
          <div class="modal-header">
            <h2 id="modalTitle">Add Category</h2>
          </div>
          <div class="modal-body">
            <form id="categoryForm" onsubmit="handleFormSubmit(event)">
              <input type="hidden" id="categoryId" name="categoryId" />
              <div class="form-group">
                <label for="categoryName">Category Name</label>
                <input type="text" id="categoryName" name="Name" placeholder="Enter Category Name" />
                <span id="name-error" class="error-message"></span>
              </div>
              <div class="form-group">
                <label for="categoryDescription">Category Description</label>
                <textarea id="categoryDescription" name="Description"
                  placeholder="Enter Category Description"></textarea>
                <span id="description-error" class="error-message"></span>
              </div>
              <!-- New Offer Percentage Field -->
              <div class="form-group">
                <label for="offerPercentage">Offer Percentage (%)</label>
                <input type="number" id="offerPercentage" name="offerPercentage" placeholder="Enter Offer Percentage (0-100)"  />
                <span id="offerpercentage-error" class="error-message"></span>
              </div>

              <div class="form-actions">
                <button type="button" class="cancel-btn" onclick="closeCategoryModal()">Cancel</button>
                <button type="submit" class="action-btn">Submit</button>
              </div>
            </form>
          </div>
        </div>
      </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script>
    // Sidebar toggle
    window.addEventListener("sidebarToggle", (e) => {
      updateLayout(e.detail.collapsed);
    });

    // Initialize layout and event listeners
    document.addEventListener("DOMContentLoaded", () => {
      const currentPath = window.location.pathname;
      const navLinks = document.querySelectorAll(".nav-item a");
      navLinks.forEach(link => {
        if (link.getAttribute('href') === currentPath) {
          link.parentElement.classList.add('active');
        } else {
          link.classList.remove("active");
        }
      });

      // Initialize button event listeners
      document.querySelectorAll(".action-btn.edit").forEach((button) => {
        button.addEventListener("click", handleEditClick);
      });
      document.querySelectorAll(".action-btn.delete").forEach((button) => {
        button.addEventListener("click", handleDeleteClick);
      });
    });

    // Responsive layout
    function updateLayout(isCollapsed = false) {
      const contentWrapper = document.querySelector(".content-wrapper");
      if (window.innerWidth <= 576) {
        contentWrapper.style.marginLeft = "0";
        contentWrapper.style.width = "100%";
      } else if (window.innerWidth <= 768 || isCollapsed) {
        contentWrapper.style.marginLeft = "70px";
        contentWrapper.style.width = "calc(100% - 70px)";
      } else {
        contentWrapper.style.marginLeft = "250px";
        contentWrapper.style.width = "calc(100% - 250px)";
      }
    }
    window.addEventListener("resize", () => updateLayout(document.body.classList.contains("sidebar-collapsed")));

    // Modal handling
    function openCategoryModal(mode, id = "", name = "", description = "", offerPercentage = "0") {
      const modal = document.getElementById("categoryModal");
      const form = document.getElementById("categoryForm");
      const title = document.getElementById("modalTitle");
      const categoryIdInput = document.getElementById("categoryId");
      const nameInput = document.getElementById("categoryName");
      const descriptionInput = document.getElementById("categoryDescription");
      const offerPercentageInput = document.getElementById("offerPercentage");

      clearErrorMessages();
      form.reset();
      categoryIdInput.value = id;
      nameInput.value = name;
      descriptionInput.value = description;
      offerPercentageInput.value = offerPercentage;
      title.textContent = mode === "add" ? "Add Category" : "Edit Category";
      modal.style.display = "flex";
    }

    function closeCategoryModal() {
      const modal = document.getElementById("categoryModal");
      modal.style.display = "none";
      clearErrorMessages();
      document.getElementById("categoryForm").reset();
    }

    // Form submission
    function handleFormSubmit(event) {
      event.preventDefault();

      if (!validateForm()) {
        return;
      }

      const id = document.getElementById("categoryId").value;
      const name = document.getElementsByName("Name")[0].value.trim();
      const description = document.getElementsByName("Description")[0].value.trim();
      const offerPercentage = document.getElementsByName("offerPercentage")[0].value.trim();
      const url = id ? `/admin/category/${id}` : "/admin/category";
      const method = id ? "PATCH" : "POST";
      
      fetch(url, {
        method: method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, description, offerPercentage: parseFloat(offerPercentage) }),
      })
        .then((response) => {
          if (!response.ok) {
            return response.json().then((err) => {
              throw new Error(err.error || "Unknown error");
            });
          }
          return response.json();
        })
        .then((data) => {
          Swal.fire({
            icon: "success",
            title: "Success",
            text: data.message || `Category ${id ? "updated" : "added"} successfully`,
          }).then(() => {
            closeCategoryModal();
            fetchCategories(); // Refresh the table dynamically
          });
        })
        .catch((error) => {
          Swal.fire({
            icon: "error",
            title: "Oops",
            text: error.message === "Category already exists"
              ? "Category name already exists"
              : `An error occurred while ${id ? "updating" : "adding"} the category`,
          });
        });
    }

    // Form validation
    function validateForm() {
        clearErrorMessages();
        const name = document.getElementsByName("Name")[0].value.trim();
        const description = document.getElementsByName("Description")[0].value.trim();
        const offerPercentage = document.getElementsByName("offerPercentage")[0].value.trim();
        let isValid = true;

        // Regex to block emojis and most special characters, allowing only letters and spaces.
        const invalidCharRegex = /[^a-zA-Z\s]/;

        // --- Name Validation ---
        if (name === "") {
            displayErrorMessage("name-error", "Please enter a category name.");
            isValid = false;
        } else if (name.length < 3 || name.length > 25) {
            displayErrorMessage("name-error", "Name must be between 3 and 25 characters.");
            isValid = false;
        } else if (invalidCharRegex.test(name)) {
            displayErrorMessage("name-error", "Name can only contain letters and spaces.");
            isValid = false;
        }

        // --- Description Validation ---
        if (description === "") {
            displayErrorMessage("description-error", "Please enter a description.");
            isValid = false;
        } else if (description.length < 10 || description.length > 100) {
            displayErrorMessage("description-error", "Description must be between 10 and 100 characters.");
            isValid = false;
        } else if (invalidCharRegex.test(description)) {
            displayErrorMessage("description-error", "Description can only contain letters and spaces.");
            isValid = false;
        }

        // --- Offer Percentage Validation ---
        if (offerPercentage === "" || isNaN(offerPercentage) || offerPercentage < 0 || offerPercentage > 100) {
            displayErrorMessage("offerpercentage-error", "Offer percentage must be a number between 0 and 100.");
            isValid = false;
        }

        return isValid;
    }

    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      if (errorElement) {
        errorElement.innerText = message;
        errorElement.style.display = "block";
      }
    }

    function clearErrorMessages() {
      const errorElements = document.getElementsByClassName("error-message");
      Array.from(errorElements).forEach((element) => {
        element.innerText = "";
        element.style.display = "none";
      });
    }

    // Toggle List/Unlist
    function toggleCategory(event, id, isListed) {
      event.preventDefault();
      Swal.fire({
        title: `Are you sure you want to ${isListed ? "unlist" : "list"} this category?`,
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes",
        cancelButtonText: "No",
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/category/toggle`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id, isListed: !isListed }),
          })
            .then((response) => {
              if (!response.ok) {
                return response.json().then((err) => {
                  throw new Error(err.error || "Unknown error");
                });
              }
              return response.json();
            })
            .then((data) => {
              Swal.fire({
                icon: "success",
                title: "Success",
                text: data.message,
              }).then(() => {
                fetchCategories(); // Refresh the table dynamically
              });
            })
            .catch((error) => {
              Swal.fire({
                icon: "error",
                title: "Oops",
                text: error.message || "An error occurred while toggling the category",
              });
            });
        }
      });
    }

    // Delete Category
    function deleteCategory(id) {
      Swal.fire({
        title: "Are you sure you want to delete this category?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, delete it",
        cancelButtonText: "No",
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/category/${id}`, {
            method: "DELETE",
            headers: { "Content-Type": "application/json" },
          })
            .then((response) => {
              if (!response.ok) {
                return response.json().then((err) => {
                  throw new Error(err.error || "Unknown error");
                });
              }
              return response.json();
            })
            .then((data) => {
              Swal.fire({
                icon: "success",
                title: "Success",
                text: data.message,
              }).then(() => {
                fetchCategories(); // Refresh the table dynamically
              });
            })
            .catch((error) => {
              Swal.fire({
                icon: "error",
                title: "Oops",
                text: error.message || "An error occurred while deleting the category",
              });
            });
        }
      });
    }

    // --- DYNAMIC FETCH LOGIC ---

    let searchTimeout;

    // Main function to fetch and render categories
    async function fetchCategories(page = 1, search = null) {
      const currentSearch = search !== null ? search : document.getElementById('searchInput').value;
      const url = `/admin/category?page=${page}&search=${encodeURIComponent(currentSearch)}&isAjax=true`;

      try {
        const response = await fetch(url);
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');

        const newTbody = doc.getElementById('categoryTableBody');
        const newPagination = doc.getElementById('paginationContainer');

        if (newTbody) document.getElementById('categoryTableBody').innerHTML = newTbody.innerHTML;
        if (newPagination) document.getElementById('paginationContainer').innerHTML = newPagination.innerHTML;

        // Update URL in browser history without reloading
        const newUrl = `/admin/category?page=${page}&search=${encodeURIComponent(currentSearch)}`;
        history.pushState({ page, search: currentSearch }, '', newUrl);

        // Re-attach event listeners to the new dynamic content
        reinitializeEventListeners();
      } catch (error) {
        console.error('Failed to fetch categories:', error);
        Swal.fire('Error', 'Could not load category data.', 'error');
      }
    }

    // Re-attach event listeners to new buttons
    function reinitializeEventListeners() {
      document.querySelectorAll(".action-btn.edit").forEach(button => button.addEventListener("click", handleEditClick));
      document.querySelectorAll(".action-btn.delete").forEach(button => button.addEventListener("click", handleDeleteClick));
      document.querySelectorAll(".list-button").forEach(button => button.addEventListener("click", (e) => {
        const row = e.target.closest('tr');
        const id = row.querySelector('.action-btn.delete').dataset.id;
        const isListed = e.target.classList.contains('unlist');
        toggleCategory(e, id, isListed);
      }));
    }

    // Handlers to get data from the element and call the main logic
    function handleEditClick(event) {
      const button = event.currentTarget;
      const id = button.dataset.id;
      const name = button.dataset.name;
      const description = button.dataset.description;
      const offerPercentage = button.dataset.offerpercentage;
      openCategoryModal("edit", id, name, description, offerPercentage);
    }

    function handleDeleteClick(event) {
      const button = event.currentTarget;
      const id = button.dataset.id;
      deleteCategory(id);
    }

    // --- EVENT LISTENERS FOR DYNAMIC ACTIONS ---

    // Live search with debouncing
    document.getElementById('searchInput').addEventListener('keyup', (event) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        fetchCategories(1, event.target.value);
      }, 300); // 300ms delay
    });

    // Search form submission (for pressing enter)
    document.getElementById('searchForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const searchInput = document.getElementById('searchInput').value.trim();
      fetchCategories(1, searchInput);
    });

    // Clear search button
    document.getElementById('clearBtn').addEventListener('click', () => {
      const searchInput = document.getElementById('searchInput');
      if (searchInput.value) {
        searchInput.value = '';
        fetchCategories(1, '');
      }
    });

    // Pagination click handler
    document.getElementById('paginationContainer').addEventListener('click', (e) => {
      if (e.target.tagName === 'A' && !e.target.classList.contains('disabled')) {
        e.preventDefault();
        const url = new URL(e.target.href);
        const page = url.searchParams.get('page');
        fetchCategories(page);
      }
    });

    // Initial setup
    document.addEventListener('DOMContentLoaded', () => {
      reinitializeEventListeners();
    });
  </script>
</body>