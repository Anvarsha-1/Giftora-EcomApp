<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report - Admin Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: #334155;
        }

        .main-wrapper {
            min-height: 100vh;
        }

        .content-wrapper {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .navbar {
            background: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        .navbar-left {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .admin-icon {
            color: #3b82f6;
            font-size: 20px;
        }

        .admin-text {
            font-weight: 600;
            color: #1e293b;
        }

        /* Page Header */
        .page-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 20px;
        }

        .page-title {
            font-size: 28px;
            font-weight: 700;
            color: #1e293b;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .export-buttons {
            display: flex;
            gap: 10px;
        }

        .export-btn {
            padding: 10px 16px;
            border: none;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .export-pdf {
            background: #dc2626;
            color: white;
        }

        .export-excel {
            background: #059669;
            color: white;
        }

        .export-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        /* Sales Summary Cards */
        .sales-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .summary-card {
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            transition: transform 0.2s;
        }

        .summary-card:hover {
            transform: translateY(-2px);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 16px;
        }

        .card-icon {
            width: 48px;
            height: 48px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
        }

        .icon-sales {
            background: #3b82f6;
        }

        .icon-orders {
            background: #06b6d4;
        }

        .icon-products {
            background: #8b5cf6;
        }

        .icon-discounts {
            background: #f59e0b;
        }

        .icon-returns {
            background: #ef4444;
        }

        .icon-revenue {
            background: #10b981;
        }

        .card-value {
            font-size: 32px;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 4px;
        }

        .card-label {
            color: #64748b;
            font-size: 14px;
            font-weight: 500;
        }

        .card-subtitle {
            color: #94a3b8;
            font-size: 12px;
            margin-top: 4px;
        }

        /* Filters Section */
        .filters-section {
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            margin-bottom: 30px;
        }

        .filters-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            font-weight: 600;
            color: #1e293b;
        }

        .filters-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            margin-bottom: 20px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .filter-label {
            font-size: 14px;
            font-weight: 500;
            color: #374151;
        }

        .filter-input,
        .filter-select {
            padding: 10px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.2s;
        }

        .filter-input:focus,
        .filter-select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .filter-actions {
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
        }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        /* Sales Table */
        .table-section {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            overflow: hidden;
        }

        .table-header {
            padding: 24px;
            border-bottom: 1px solid #e5e7eb;
            font-weight: 600;
            color: #1e293b;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .table-wrapper {
            overflow-x: auto;
        }

        .sales-table {
            width: 100%;
            border-collapse: collapse;
        }

        .sales-table th {
            background: #f8fafc;
            padding: 16px 12px;
            text-align: left;
            font-weight: 600;
            color: #374151;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border-bottom: 1px solid #e5e7eb;
        }

        .sales-table td {
            padding: 16px 12px;
            border-bottom: 1px solid #f1f5f9;
            vertical-align: middle;
        }

        .sales-table tbody tr {
            transition: background-color 0.2s;
            cursor: pointer;
        }

        .sales-table tbody tr:hover {
            background-color: #f8fafc;
        }

        .order-id {
            font-family: 'Courier New', monospace;
            font-weight: 600;
            color: #3b82f6;
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-delivered {
            background: #dcfce7;
            color: #166534;
        }

        .status-processing {
            background: #fef3c7;
            color: #92400e;
        }

        .status-cancelled {
            background: #fee2e2;
            color: #991b1b;
        }

        .status-pending {
            background: #e0e7ff;
            color: #3730a3;
        }

        .payment-method {
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 500;
        }

        .payment-online {
            background: #dbeafe;
            color: #1e40af;
        }

        .payment-cod {
            background: #fed7aa;
            color: #9a3412;
        }
        .payment-wallet {
            background: #e0f2fe;
            color: #0369a1;
        }

        .amount {
            font-weight: 600;
            color: #1e293b;
        }

        .discount {
            color: #059669;
            font-weight: 600;
        }

        .coupon {
            background: #f3e8ff;
            color: #7c3aed;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: 600;
        }

        /* Expandable Row */
        .expandable-row {
            background: #f8fafc;
        }

        .products-list {
            padding: 20px;
        }

        .products-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

        .products-table th,
        .products-table td {
            padding: 8px 12px;
            text-align: left;
            border: 1px solid #e5e7eb;
        }

        .products-table th {
            background: #f1f5f9;
            font-weight: 600;
            font-size: 12px;
        }

        .expand-icon {
            transition: transform 0.2s;
        }

        .expand-icon.rotated {
            transform: rotate(90deg);
        }

        /* Table Footer */
        .table-footer {
            padding: 20px 24px;
            background: #f8fafc;
            border-top: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        .footer-stats {
            display: flex;
            gap: 30px;
            flex-wrap: wrap;
        }

        .footer-stat {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .footer-stat-label {
            font-size: 12px;
            color: #64748b;
            font-weight: 500;
        }

        .footer-stat-value {
            font-size: 16px;
            font-weight: 700;
            color: #1e293b;
        }
        .pagination-area {
            display: flex;
            gap: 20px;
            align-items: center;
            flex-wrap: wrap;
        }
        .pagination-controls {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        .page-btn {
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            background: #fff;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
        }
        .page-btn.active {
            background: #3b82f6;
            color: #fff;
            border-color: #3b82f6;
        }
        .page-btn[disabled] {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .content-wrapper {
                padding: 10px;
            }

            .page-header {
                flex-direction: column;
                align-items: stretch;
            }

            .export-buttons {
                justify-content: stretch;
            }

            .export-btn {
                flex: 1;
                justify-content: center;
            }

            .sales-summary {
                grid-template-columns: 1fr;
            }

            .filters-grid {
                grid-template-columns: 1fr;
            }

            .filter-actions {
                justify-content: stretch;
            }

            .btn {
                flex: 1;
                justify-content: center;
            }

            .sales-table {
                font-size: 14px;
            }

            .sales-table th,
            .sales-table td {
                padding: 12px 8px;
            }

            .footer-stats {
                justify-content: space-between;
                width: 100%;
            }
        }

        @media (max-width: 480px) {
            .page-title {
                font-size: 24px;
            }

            .card-value {
                font-size: 24px;
            }

            .sales-table {
                font-size: 12px;
            }

            .sales-table th,
            .sales-table td {
                padding: 8px 6px;
            }
        }
    </style>
</head>

<body>
    <div class="main-wrapper">
        <!-- Include the header partial (this would be processed by EJS) -->
        <%- include('../partials/admin/header.ejs') %>

            <div class="content-wrapper">
                <div class="navbar">
                    <div class="navbar-left">
                        <i class="fas fa-user-shield admin-icon"></i>
                        <span class="admin-text">Admin</span>
                    </div>
                </div>

                <!-- Page Header -->
                <div class="page-header">
                    <h1 class="page-title">
                        <i class="fas fa-chart-line"></i>
                        Sales Report
                    </h1>
                    <div class="export-buttons">
                        <button class="export-btn export-pdf" id="exportPdfBtn">
                            <i class="fas fa-file-pdf"></i>
                            Export PDF
                        </button>
                        <button class="export-btn export-excel" id="exportExcelBtn">
                            <i class="fas fa-file-excel"></i>
                            Export Excel
                        </button>
                    </div>
                </div>

                <!-- Sales Summary Cards -->
                <div class="sales-summary">
                    <div class="summary-card">
                        <div class="card-header">
                            <div class="card-icon icon-sales">
                                <i class="fas fa-rupee-sign"></i>
                            </div>
                        </div>
                        <div class="card-value" id="totalSales"><%= (summary && summary.totalSales) ? '₹' + Number(summary.totalSales).toLocaleString('en-IN') : '₹0' %></div>
                        <div class="card-label">Total Sales</div>
                        <div class="card-subtitle">From delivered orders</div>
                    </div>

                    <div class="summary-card">
                        <div class="card-header">
                            <div class="card-icon icon-orders">
                                <i class="fas fa-shopping-cart"></i>
                            </div>
                        </div>
                        <div class="card-value" id="totalOrders"><%= (summary && summary.totalOrders) ? summary.totalOrders : 0 %></div>
                        <div class="card-label">Total Orders</div>
                        <div class="card-subtitle">All orders</div>
                    </div>

                    <div class="summary-card">
                        <div class="card-header">
                            <div class="card-icon icon-products">
                                <i class="fas fa-box"></i>
                            </div>
                        </div>
                        <div class="card-value" id="productsSold"><%= (summary && summary.productsSold) ? summary.productsSold : 0 %></div>
                        <div class="card-label">Products Sold</div>
                        <div class="card-subtitle">Total quantity</div>
                    </div>

                    <div class="summary-card">
                        <div class="card-header">
                            <div class="card-icon icon-discounts">
                                <i class="fas fa-percentage"></i>
                            </div>
                        </div>
                        <div class="card-value" id="totalDiscounts"><%= (summary && summary.totalDiscounts) ? '₹' + Number(summary.totalDiscounts).toLocaleString('en-IN') : '₹0' %></div>
                        <div class="card-label">Total Discounts</div>
                        <div class="card-subtitle">Coupon discounts</div>
                    </div>

                    <div class="summary-card">
                        <div class="card-header">
                            <div class="card-icon icon-returns">
                                <i class="fas fa-undo"></i>
                            </div>
                        </div>
                        <div class="card-value" id="totalReturns"><%= (summary && summary.totalReturns) ? '₹' + Number(summary.totalReturns).toLocaleString('en-IN') : '₹0' %></div>
                        <div class="card-label">Total Returns</div>
                        <div class="card-subtitle">Cancelled orders</div>
                    </div>

                    <div class="summary-card">
                        <div class="card-header">
                            <div class="card-icon icon-revenue">
                                <i class="fas fa-chart-line"></i>
                            </div>
                        </div>
                        <div class="card-value" id="netRevenue"><%= (summary && summary.netRevenue) ? '₹' + Number(summary.netRevenue).toLocaleString('en-IN') : '₹0' %></div>
                        <div class="card-label">Net Revenue</div>
                        <div class="card-subtitle">Sales - Returns</div>
                    </div>
                </div>

                <!-- Filters Section -->
                <div class="filters-section">
                    <div class="filters-header">
                        <i class="fas fa-filter"></i>
                        Filters & Controls
                    </div>

                    <div class="filters-grid">
                        <div class="filter-group">
                            <label class="filter-label">Date Filter</label>
                            <select class="filter-select" id="dateFilter">
                                <option value="all">All Time</option>
                                <option value="today">Today</option>
                                <option value="week">This Week</option>
                                <option value="month">This Month</option>
                                <option value="year">This Year</option>
                                <option value="custom">Custom Range</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">Order Status</label>
                            <select class="filter-select" id="statusFilter">
                                <option value="all">All Status</option>
                                <option value="delivered">Delivered</option>
                                <option value="processing">Processing</option>
                                <option value="pending">Pending</option>
                                <option value="cancelled">Cancelled</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">Payment Method</label>
                            <select class="filter-select" id="paymentFilter">
                                <option value="all">All Methods</option>
                                <option value="online">Online</option>
                                <option value="cod">COD</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">Search Customer</label>
                            <input type="text" class="filter-input" id="customerSearch"
                                placeholder="Customer name or email">
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">Sort By</label>
                            <select class="filter-select" id="sortBy">
                                <option value="date-newest">Date (Newest First)</option>
                                <option value="date-oldest">Date (Oldest First)</option>
                                <option value="amount-high">Amount (High to Low)</option>
                                <option value="amount-low">Amount (Low to High)</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">Rows per page</label>
                            <select class="filter-select" id="pageSize">
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">Custom Date Range</label>
                            <div style="display: flex; gap: 10px;">
                                <input type="date" class="filter-input" id="startDate" style="flex: 1;">
                                <input type="date" class="filter-input" id="endDate" style="flex: 1;">
                            </div>
                        </div>
                    </div>

                    <div class="filter-actions">
                        <button class="btn btn-primary" onclick="applyFilters()">
                            <i class="fas fa-check"></i>
                            Apply Filters
                        </button>
                        <button class="btn btn-secondary" onclick="clearFilters()">
                            <i class="fas fa-times"></i>
                            Clear
                        </button>
                    </div>
                </div>

                <!-- Sales Table -->
                <div class="table-section">
                    <div class="table-header">
                        <i class="fas fa-table"></i>
                        Detailed Sales Table
                    </div>

                    <div class="table-wrapper">
                        <table class="sales-table">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Order Date</th>
                                    <th>Customer Name</th>
                                    <th>Payment Method</th>
                                    <th>Order Status</th>
                                    <th>Product Name</th>
                                    <th>Quantity</th>
                                    <th>Price</th>
                                </tr>
                            </thead>
                            <tbody id="salesTableBody">
                                <!-- Table rows will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                    <div class="table-footer">
                        
                        <div class="pagination-area">
                            <% const pg = (typeof pagination !== 'undefined' && pagination) ? pagination : {}; 
                               const cp = pg.currentPage || 1; 
                               const lim = pg.limit || 10; 
                               const tc = pg.totalCount || 0; 
                               const startIdx = tc ? ((cp - 1) * lim + 1) : 0; 
                               const endIdx = Math.min(cp * lim, tc); 
                               const tp = pg.totalPages || 1; %>
                            <div class="pagination-info">Showing <%= startIdx %>–<%= endIdx %> of <%= tc %></div>
                            <div class="pagination-controls">
                                <button class="page-btn" onclick="goToPage(<%= cp - 1 %>)" <%= cp === 1 ? 'disabled' : '' %>>Prev</button>
                                <% if (tp <= 7) { %>
                                    <% for (let p = 1; p <= tp; p++) { %>
                                        <button class="page-btn <%= p === cp ? 'active' : '' %>" onclick="goToPage(<%= p %>)"><%= p %></button>
                                    <% } %>
                                <% } else { %>
                                    <button class="page-btn <%= 1 === cp ? 'active' : '' %>" onclick="goToPage(1)">1</button>
                                    <% if (cp > 3) { %><span>...</span><% } %>
                                    <% const start = Math.max(2, cp - 1); const end = Math.min(tp - 1, cp + 1); %>
                                    <% for (let p = start; p <= end; p++) { %>
                                        <button class="page-btn <%= p === cp ? 'active' : '' %>" onclick="goToPage(<%= p %>)"><%= p %></button>
                                    <% } %>
                                    <% if (cp < tp - 2) { %><span>...</span><% } %>
                                    <button class="page-btn <%= tp === cp ? 'active' : '' %>" onclick="goToPage(<%= tp %>)"><%= tp %></button>
                                <% } %>
                                <button class="page-btn" onclick="goToPage(<%= cp + 1 %>)" <%= cp === tp ? 'disabled' : '' %>>Next</button>
                            </div>
                        </div>
                    </div>

                    
                </div>
            </div>
    </div>

    <script>
        // Server-provided data
        let salesData = <%- JSON.stringify(salesData || []) %>;
        let expandedRows = new Set();
        const initialSummary = <%- JSON.stringify(summary || {}) %>;
        const pagination = <%- JSON.stringify(pagination || {}) %>;

        function formatCurrency(amount) {
            return `₹${amount.toLocaleString()}`;
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-IN', {
                day: '2-digit',
                month: 'short',
                year: 'numeric'
            });
        }

        function getStatusClass(status) {
            return `status-${status.toLowerCase()}`;
        }

        function getPaymentClass(method) {
            return `payment-${method.toLowerCase()}`;
        }

        function renderTable() {
            const tbody = document.getElementById('salesTableBody');
            tbody.innerHTML = '';

            if (!salesData || salesData.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = `<td colspan="11" style="text-align:center; padding:20px; color:#64748b;">No results found</td>`;
                tbody.appendChild(row);
                return;
            }

            salesData.forEach(item => {
                // Main row
                const mainRow = document.createElement('tr');
                mainRow.innerHTML = `
                    <td><span class="order-id">${item.id}</span></td>
                    <td>${formatDate(item.date)}</td>
                    <td>${item.customerName}</td>
                    <td>
                        <span class="payment-method ${getPaymentClass(item.paymentMethod)}">
                            ${item.paymentMethod}
                        </span>
                    </td>
                    <td>
                        <span class="status-badge ${getStatusClass(item.status)}">
                            ${item.status}
                        </span>
                    </td>
                    <td>${item.productName}</td>
                    <td>${item.quantity}</td>
                    <td class="amount">${formatCurrency(item.price)}</td>
                `;
                tbody.appendChild(mainRow);
            });
        }

        function applyFilters(page = 1) {
            const dateFilter = document.getElementById('dateFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const paymentFilter = document.getElementById('paymentFilter').value;
            const customerSearch = document.getElementById('customerSearch').value.trim();
            const sortBy = document.getElementById('sortBy').value;
            const pageSizeEl = document.getElementById('pageSize');
            const currentLimit = pageSizeEl ? pageSizeEl.value : (pagination?.limit || 10);
            let startDate = document.getElementById('startDate').value;
            let endDate = document.getElementById('endDate').value;
            
            // Build URL params (server-side pagination and filters)
            const params = new URLSearchParams();
            params.set('page', String(page));
            params.set('limit', String(currentLimit));
            if (statusFilter && statusFilter !== 'all') params.set('status', statusFilter);
            if (paymentFilter && paymentFilter !== 'all') params.set('payment', paymentFilter);
            // For custom range, send dates. Otherwise, just send the filter name.
            if (dateFilter === 'custom' && startDate) params.set('startDate', startDate);
            if (dateFilter === 'custom' && endDate) params.set('endDate', endDate);
            if (customerSearch) params.set('search', customerSearch);
            if (sortBy) params.set('sort', sortBy);
            if (dateFilter && dateFilter !== 'all') params.set('dateFilter', dateFilter);

            const url = `/sales?${params.toString()}`;
            // Update browser history without reloading
            history.pushState({ path: url }, '', url);

            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                updateUI(data);
            })
            .catch(error => {
                console.error('Fetch error:', error);
                const tbody = document.getElementById('salesTableBody');
                tbody.innerHTML = `<tr><td colspan="11" style="text-align:center; padding:20px; color:#dc2626;">Failed to load data. Please try again.</td></tr>`;
            });

            // const url = new URL(window.location.href);
            // url.search = params.toString();
            // window.location.href = url.toString();
        }

        function clearFilters() {
            // Reset all filter inputs to their default values
            document.getElementById('dateFilter').value = 'all';
            document.getElementById('statusFilter').value = 'all';
            document.getElementById('paymentFilter').value = 'all';
            document.getElementById('customerSearch').value = '';
            document.getElementById('sortBy').value = 'date-newest';
            document.getElementById('pageSize').value = '10'; // Assuming 10 is the default page size
            document.getElementById('startDate').value = '';
            document.getElementById('endDate').value = '';

            // Hide custom date inputs if they were visible
            document.querySelector('.filter-group:last-child').style.display = 'none';

            // Update URL in browser history without reloading the page
            history.pushState({ path: window.location.pathname }, '', window.location.pathname);

            // Apply filters to fetch data with cleared parameters
            applyFilters(1); // Go back to the first page with cleared filters
        }

        function goToPage(n) {
            if (!pagination || !pagination.totalPages) return;
            const tp = pagination.totalPages;
            if (n < 1 || n > tp) return;
            applyFilters(n);
        }

        function updateUI(data) {
            // Update summary cards
            document.getElementById('totalSales').textContent = formatCurrency(data.summary.totalSales || 0);
            document.getElementById('totalOrders').textContent = data.summary.totalOrders || 0;
            document.getElementById('productsSold').textContent = data.summary.productsSold || 0;
            document.getElementById('totalDiscounts').textContent = formatCurrency(data.summary.totalDiscounts || 0);
            document.getElementById('totalReturns').textContent = formatCurrency(data.summary.totalReturns || 0);
            document.getElementById('netRevenue').textContent = formatCurrency(data.summary.netRevenue || 0);

            // Update table data and re-render
            salesData = data.salesData;
            renderTable();

            // Update pagination
            renderPagination(data.pagination);
        }

        function renderPagination(pg) {
            const paginationArea = document.querySelector('.pagination-area');
            if (!pg || pg.totalCount === 0) {
                paginationArea.innerHTML = '<div class="pagination-info">No results</div>';
                return;
            }
            const { currentPage: cp, totalPages: tp, totalCount: tc, limit: lim } = pg;
            const startIdx = tc ? ((cp - 1) * lim + 1) : 0;
            const endIdx = Math.min(cp * lim, tc);

            let paginationHtml = `<div class="pagination-info">Showing ${startIdx}–${endIdx} of ${tc}</div><div class="pagination-controls">`;
            paginationHtml += `<button class="page-btn" onclick="goToPage(${cp - 1})" ${cp === 1 ? 'disabled' : ''}>Prev</button>`;
            
            // Simplified pagination buttons for dynamic rendering
            for (let p = 1; p <= tp; p++) {
                 // In a real app with many pages, you'd add logic for '...'
                 paginationHtml += `<button class="page-btn ${p === cp ? 'active' : ''}" onclick="goToPage(${p})">${p}</button>`;
            }

            paginationHtml += `<button class="page-btn" onclick="goToPage(${cp + 1})" ${cp === tp ? 'disabled' : ''}>Next</button></div>`;
            paginationArea.innerHTML = paginationHtml;
        }

        // --- Report Download Functionality ---
        const downloadReport = (format) => {
            const btnId = format === 'pdf' ? 'exportPdfBtn' : 'exportExcelBtn';
            const btn = document.getElementById(btnId);
            if (!btn) return;

            const originalText = btn.innerHTML;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
            btn.disabled = true;

            // 1. Gather all current filters
            const dateFilter = document.getElementById('dateFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const paymentFilter = document.getElementById('paymentFilter').value;
            const customerSearch = document.getElementById('customerSearch').value.trim();
            const sortBy = document.getElementById('sortBy').value;
            let startDate = document.getElementById('startDate').value;
            let endDate = document.getElementById('endDate').value;

            // 2. Build URL params
            const params = new URLSearchParams();
            if (statusFilter && statusFilter !== 'all') params.set('status', statusFilter);
            if (paymentFilter && paymentFilter !== 'all') params.set('payment', paymentFilter);
            if (dateFilter === 'custom' && startDate) params.set('startDate', startDate);
            if (dateFilter === 'custom' && endDate) params.set('endDate', endDate);
            if (customerSearch) params.set('search', customerSearch);
            if (sortBy) params.set('sort', sortBy);
            if (dateFilter && dateFilter !== 'all') params.set('dateFilter', dateFilter);

            const endpoint = format === 'pdf' ? '/sales/download-report' : '/sales/download-report-excel';
            const fileExtension = format === 'pdf' ? 'pdf' : 'xlsx';

            const url = `${endpoint}?${params.toString()}`;

            // 3. Fetch the report as a blob
            fetch(url)
                .then(response => response.blob())
                .then(blob => {
                    const downloadUrl = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = downloadUrl;
                    a.download = `sales-report-${new Date().toISOString().split('T')[0]}.${fileExtension}`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(downloadUrl);
                }).finally(() => {
                    btn.innerHTML = originalText;
                    btn.disabled = false;
                });
        };

        // Show/hide custom date inputs based on date filter selection
        document.getElementById('dateFilter').addEventListener('change', function () {
            const customDateInputs = document.querySelector('.filter-group:last-child');
            if (this.value === 'custom') {
                customDateInputs.style.display = 'block';
            } else {
                customDateInputs.style.display = 'none';
                document.getElementById('startDate').value = '';
                document.getElementById('endDate').value = '';
            }
        });

        // Auto-apply filters on certain inputs (disabled auto-search to avoid page refresh while typing)
        // document.getElementById('customerSearch').addEventListener('input', debounce(applyFilters, 300));

        // Debounce function to limit API calls
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function syncFiltersFromQuery() {
            const params = new URLSearchParams(window.location.search);
            const dateFilterEl = document.getElementById('dateFilter');
            const statusEl = document.getElementById('statusFilter');
            const paymentEl = document.getElementById('paymentFilter');
            const searchEl = document.getElementById('customerSearch');
            const sortEl = document.getElementById('sortBy');
            const startEl = document.getElementById('startDate');
            const endEl = document.getElementById('endDate');
            const pageSizeEl = document.getElementById('pageSize');

            const status = params.get('status');
            const payment = params.get('payment');
            const dateFilter = params.get('dateFilter');
            const startDate = params.get('startDate');
            const endDate = params.get('endDate');
            const search = params.get('search');
            const sort = params.get('sort');
            const limit = params.get('limit');

            if (status) statusEl.value = status.toLowerCase();
            if (payment) paymentEl.value = payment.toLowerCase();
            if (sort) sortEl.value = sort;
            if (search) searchEl.value = search;
            if (pageSizeEl) pageSizeEl.value = limit || (pagination && pagination.limit) || '10';

            if (startDate || endDate) {
                startEl.value = startDate || '';
                endEl.value = endDate || '';
                dateFilterEl.value = 'custom';
            } else if (dateFilter) {
                dateFilterEl.value = dateFilter;
            } else {
                dateFilterEl.value = 'all';
            }
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function () {
            syncFiltersFromQuery();
            const customDateInputs = document.querySelector('.filter-group:last-child');
            if (document.getElementById('dateFilter').value === 'custom') {
                customDateInputs.style.display = 'block';
            } else {
                customDateInputs.style.display = 'none';
            }

            // Initial render
            renderTable();
            if (typeof initialSummary === 'object' && initialSummary && initialSummary.totalSales !== undefined) {
                document.getElementById('totalSales').textContent = formatCurrency(initialSummary.totalSales || 0);
                document.getElementById('totalOrders').textContent = initialSummary.totalOrders || 0;
                document.getElementById('productsSold').textContent = initialSummary.productsSold || 0;
                document.getElementById('totalDiscounts').textContent = formatCurrency(initialSummary.totalDiscounts || 0);
                document.getElementById('totalReturns').textContent = formatCurrency(initialSummary.totalReturns || 0);
                document.getElementById('netRevenue').textContent = formatCurrency(initialSummary.netRevenue || 0);
            }

            // Add event listeners for auto-applying filters
            const filterElements = ['dateFilter', 'statusFilter', 'paymentFilter', 'sortBy', 'pageSize', 'startDate', 'endDate'];
            filterElements.forEach(id => {
                const el = document.getElementById(id);
                if (el) el.addEventListener('change', () => applyFilters(1));
            });

            // Use debounce for the search input to avoid firing on every keystroke
            document.getElementById('customerSearch').addEventListener('input', debounce(() => applyFilters(1), 400));

            // Add debounced event listener for the PDF export button
            document.getElementById('exportPdfBtn').addEventListener('click', debounce(() => downloadReport('pdf'), 1000));
            document.getElementById('exportExcelBtn').addEventListener('click', debounce(() => downloadReport('excel'), 1000));
        });

        // Handle responsive table on mobile
        function handleMobileTable() {
            const table = document.querySelector('.sales-table');
            const tableWrapper = document.querySelector('.table-wrapper');

            if (window.innerWidth < 768) {
                // Add horizontal scroll for mobile
                tableWrapper.style.overflowX = 'auto';
            }
        }

        window.addEventListener('resize', handleMobileTable);
        document.addEventListener('DOMContentLoaded', handleMobileTable);
       


    </script>
</body>

</html>