<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Your Account</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
   <link rel="stylesheet" href="/css/user/login.css">
</head>

<body>
 <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <div class="login-container">
        <!-- Left Section with Modern Design -->
        <div class="left-section">
            <div class="floating-shapes">
                <div class="shape"></div>
                <div class="shape"></div>
                <div class="shape"></div>
            </div>

            <div class="geometric-pattern">
                <div class="logo-circle">
                    <div class="logo-inner">
                        <svg class="gift-icon" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                            <!-- Gift box base with subtle texture -->
                            <defs>
                                <pattern id="boxTexture" patternUnits="userSpaceOnUse" width="4" height="4">
                                    <path d="M0 0h4v4h-4z" fill="#3F3D7A" />
                                    <path d="M0 0l4 4m0-4l-4 4" stroke="#2C2A4A" stroke-width="0.2" />
                                </pattern>
                                <linearGradient id="boxGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                    <stop offset="0%" style="stop-color:#5C5B7C;stop-opacity:1" />
                                    <stop offset="100%" style="stop-color:#2C2A4A;stop-opacity:1" />
                                </linearGradient>
                            </defs>
                            <rect x="15" y="35" width="70" height="50" fill="url(#boxGradient)" stroke="#1A1840"
                                stroke-width="1.5" />

                            <!-- Gift box top shadow with softer edge -->
                            <rect x="15" y="35" width="70" height="10" fill="rgba(0,0,0,0.2)"
                                style="filter: url(#blur1)" />
                            <defs>
                                <filter id="blur1">
                                    <feGaussianBlur in="SourceGraphic" stdDeviation="1" />
                                </filter>
                            </defs>

                            <!-- Gift box side panel with perspective -->
                            <polygon points="85,35 95,28 95,78 85,85" fill="#2C2A4A" stroke="#1A1840"
                                stroke-width="1" />

                            <!-- Ribbon vertical with realistic shading -->
                            <defs>
                                <linearGradient id="ribbonVGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                                    <stop offset="0%" style="stop-color:#8D8DB4;stop-opacity:1" />
                                    <stop offset="50%" style="stop-color:#5C5B7C;stop-opacity:1" />
                                    <stop offset="100%" style="stop-color:#3F3D7A;stop-opacity:1" />
                                </linearGradient>
                            </defs>
                            <rect x="45" y="25" width="10" height="60" fill="url(#ribbonVGradient)" stroke="#2C2A4A"
                                stroke-width="0.5" />
                            <rect x="47" y="25" width="6" height="60" fill="rgba(255,255,255,0.2)" />

                            <!-- Ribbon horizontal with realistic shading -->
                            <defs>
                                <linearGradient id="ribbonHGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                                    <stop offset="0%" style="stop-color:#8D8DB4;stop-opacity:1" />
                                    <stop offset="50%" style="stop-color:#5C5B7C;stop-opacity:1" />
                                    <stop offset="100%" style="stop-color:#3F3D7A;stop-opacity:1" />
                                </linearGradient>
                            </defs>
                            <rect x="10" y="45" width="80" height="10" fill="url(#ribbonHGradient)" stroke="#2C2A4A"
                                stroke-width="0.5" />
                            <rect x="10" y="47" width="80" height="6" fill="rgba(255,255,255,0.2)" />

                            <!-- Bow left with realistic curves -->
                            <defs>
                                <radialGradient id="bowGradientLeft" cx="40%" cy="40%" r="50%">
                                    <stop offset="0%" style="stop-color:#B0B0D2;stop-opacity:1" />
                                    <stop offset="100%" style="stop-color:#5C5B7C;stop-opacity:1" />
                                </radialGradient>
                            </defs>
                            <path d="M35 30 C30 25, 30 35, 25 30 Q30 32, 35 30" fill="url(#bowGradientLeft)"
                                stroke="#2C2A4A" stroke-width="0.5" />

                            <!-- Bow right with realistic curves -->
                            <defs>
                                <radialGradient id="bowGradientRight" cx="60%" cy="40%" r="50%">
                                    <stop offset="0%" style="stop-color:#B0B0D2;stop-opacity:1" />
                                    <stop offset="100%" style="stop-color:#5C5B7C;stop-opacity:1" />
                                </radialGradient>
                            </defs>
                            <path d="M65 30 C70 25, 70 35, 75 30 Q70 32, 65 30" fill="url(#bowGradientRight)"
                                stroke="#2C2A4A" stroke-width="0.5" />

                            <!-- Bow center with realistic shading -->
                            <defs>
                                <radialGradient id="bowCenterGradient" cx="50%" cy="50%" r="50%">
                                    <stop offset="0%" style="stop-color:#D8D8E8;stop-opacity:1" />
                                    <stop offset="100%" style="stop-color:#5C5B7C;stop-opacity:1" />
                                </radialGradient>
                            </defs>
                            <ellipse cx="50" cy="30" rx="8" ry="10" fill="url(#bowCenterGradient)" stroke="#2C2A4A"
                                stroke-width="0.5" />

                            <!-- Bow highlights -->
                            <ellipse cx="45" cy="26" rx="3" ry="2" fill="#D8D8E8" opacity="0.8" />
                            <ellipse cx="55" cy="26" rx="3" ry="2" fill="#D8D8E8" opacity="0.8" />

                            <!-- Box highlights for realism -->
                            <rect x="18" y="38" width="4" height="20" fill="rgba(255,255,255,0.3)" />
                            <rect x="18" y="38" width="25" height="3" fill="rgba(255,255,255,0.2)" />
                        </svg>
                    </div>
                </div>
                <div class="welcome-text">Welcome Back</div>
                <div class="welcome-subtitle">Discover the perfect gift</div>
            </div>
        </div>

        <!-- Right Section with Login Form -->
        <div class="right-section">
            <div class="login-header">
                <h1>Sign in to your account</h1>
                <p>Enter your credentials below</p>
            </div>

            <!-- Display Flash Messages -->
            <div class="alert alert-danger" style="display: none;" id="errorAlert">
                <!-- Error messages will be shown here -->
            </div>

            <div class="alert alert-success" style="display: none;" id="successAlert">
                <!-- Success messages will be shown here -->
            </div>

            <form action="/login" method="POST" id="loginForm">
                <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" id="email" name="email" class="form-input" placeholder="Enter your email">
                    <div class="error-message" id="emailError"></div>
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" name="password" class="form-input"
                        placeholder="Enter your password">
                    <svg class="password-toggle" id="passwordToggle" viewBox="0 0 24 24">
                        <path
                            d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z" />
                    </svg>
                    <div class="error-message" id="passwordError"></div>
                </div>

                <div class="forgot-password">
                    <a href="/forgot-password">Forgot Password?</a>
                </div>

                <button type="submit" class="login-button" href="/">
                    Sign In
                </button>
            </form>

            <div class="divider">
                <span>or continue with</span>
            </div>

            <button type="button" class="google-signin" onclick="signInWithGoogle()">
                <svg class="google-icon" viewBox="0 0 24 24">
                    <path fill="#4285F4"
                        d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
                    <path fill="#34A853"
                        d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
                    <path fill="#FBBC05"
                        d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
                    <path fill="#EA4335"
                        d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
                </svg>
                Sign in with Google
            </button>

            <div class="signup-link">
                Don't have an account? <a href="/signup">Create Account</a>
            </div>
        </div>
    </div>

    <script>

      

        document.getElementById('passwordToggle').addEventListener('click', function () {
            const passwordInput = document.getElementById('password');
            const path = this.querySelector('path'); // ✅ Select the <path> element inside the SVG

            const isPassword = passwordInput.type === 'password';
            passwordInput.type = isPassword ? 'text' : 'password';

            path.setAttribute("d", isPassword
                ? "M12 7c2.76 0 5 2.24 5 5s-2.24 5-5 5-5-2.24-5-5 2.24-5 5-5zm0-2.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zm0 12c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                : "M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"
            );
        });

        function clearErrors() {
            document.querySelectorAll('.error-message').forEach(el => el.classList.remove('show'));
            document.querySelectorAll('.form-input').forEach(el => el.classList.remove('error'));
        }

        function showError(fieldId, message) {
            const input = document.getElementById(fieldId);
            const errorDiv = document.getElementById(fieldId + 'Error');

            input.classList.add('error');
            errorDiv.textContent = message;
            errorDiv.classList.add('show');
        }

        function isValidEmail(email) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return emailRegex.test(email);
        }

        function signInWithGoogle() {
            window.location.href = '/auth/google';
        }

       
        document.querySelectorAll('.form-input').forEach(input => {
            input.addEventListener('focus', function () {
                this.classList.remove('error');
                const fieldId = this.id;
                const errorMessage = document.getElementById(fieldId + 'Error');
                if (errorMessage) {
                    errorMessage.classList.remove('show');
                }
            });
        });

           $('#loginForm').submit(function (e) {
           e.preventDefault();

            const email = document.getElementById('email').value.trim();
            const password = document.getElementById('password').value.trim();

            if (!email || !password) {
                return Swal.fire({
                    icon: "warning",
                    title: "Missing Fields",
                    text: "Please enter both email and password.",
                    showClass: { popup: 'animate__animated animate__shakeX' }
                });
            }


           

            fetch("/login", {
                   method: "POST",
                   headers: {
                       "Content-Type": "application/json"
                   },
                   body: JSON.stringify({ email, password })
               })
                   .then(async (res) => {
                       const response = await res.json();

                       if (res.ok && response.success) {
                           Swal.fire({
                               icon: "success",
                               title: "Login Successful",
                               text: "Redirecting...",
                               timer: 1500,
                               showConfirmButton: false,
                               timerProgressBar: true,
                               showClass: { popup: 'animate__animated animate__zoomIn' },
                               hideClass: { popup: 'animate__animated animate__zoomOut' }
                           }).then(() => {
                               window.location.href = response.redirectUrl || '/home';
                           });
                       } else {
                           Swal.fire({
                               icon: 'error',
                               title: 'Login Failed',
                               text: response.message || 'Invalid email or password.',
                               confirmButtonText: 'Try Again',
                               showClass: { popup: 'animate__animated animate__shakeX' }
                           });
                       }
                   })
                   .catch((error) => {
                       Swal.fire({
                           icon: 'error',
                           title: 'Server Error',
                           text: 'Something went wrong. Please try again later.',
                           showClass: { popup: 'animate__animated animate__fadeInDown' },
                           hideClass: { popup: 'animate__animated animate__fadeOutUp' }
                       });
                   });
            
        })
        

    


        
    </script>
</body>

</html>