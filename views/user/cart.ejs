<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart - Your Store</title>
    <script src="https://unpkg.com/lucide@latest"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .toast {
            display: none;
            padding: 12px 16px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            width: 320px;
            animation: slideIn 0.3s ease-out, fadeOut 0.3s ease-in 4s forwards;
        }

        .toast.success {
            border-left: 4px solid #10b981;
        }

        .toast.error {
            border-left: 4px solid #ef4444;
        }

        .toast.show {
            display: flex;
        }

        /* Ensure the body takes up at least the full viewport height */
        html,
        body {
            height: 100%;
            margin: 0;
        }

        footer {
            padding-top: 10rem;
            text-align: center;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
            }

            to {
                transform: translateX(0);
            }
        }

        @keyframes fadeOut {
            to {
                opacity: 0;
            }
        }
        @media (min-width: 1024px) {
    .lg\:grid {
        margin-left: 50px;
        margin-right: 50px;
    }
}

        .cart-item {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            border-radius: 8px;
        }

        .cart-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            background-color: #f9fafb;
        }

        .btn {
            transition: background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
        }

        .btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        }

        .qty-input {
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .qty-input:focus {
            border-color: #2563eb;
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        a.text-blue-600:hover {
            color: #1d4ed8;
            text-decoration: underline;
        }
    </style>
</head>

<body class="bg-gray-100 font-sans antialiased">
    <!-- Navigation Breadcrumb -->
    <%- include('../partials/user/newheader.ejs') %>

        <!-- Main Content -->
        <div class="mx-auto px-2 sm:px-4 py-6 lg:max-w-none lg:px-0">
            <div class="lg:grid lg:grid-cols-12 lg:gap-6">
                <!-- Cart Items Section -->
                <div class="lg:col-span-8">
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <h1 class="text-2xl font-bold text-gray-900 mb-6">Shopping Cart</h1>

                        <!-- Cart Items Container -->
                        <div id="cartItemsContainer">
                            <% if (!cartItems || cartItems.length===0) { %>
                                <div id="emptyCartMessage" class="text-center py-12">
                                    <div class="mb-4">
                                        <i data-lucide="shopping-cart" class="w-16 h-16 text-gray-300 mx-auto"></i>
                                    </div>
                                    <h3 class="text-lg font-medium text-gray-900 mb-2">Your cart is empty</h3>
                                    <p class="text-gray-500 mb-6">Let's find something for you!</p>
                                    <a href="/"
                                        class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors btn">
                                        <i data-lucide="arrow-left" class="w-4 h-4 mr-2"></i>
                                        Continue Shopping
                                    </a>
                                </div>
                                <% } else if (cartItems && cartItems.length> 0) { %>
                                    <% cartItems.reverse().forEach(item=> { %>
                                        <div class="cart-item flex flex-col sm:flex-row items-start sm:items-center py-4 border-b border-gray-200 last:border-b-0"
                                            data-item-id="<%= item._id %>">
                                            <!-- Product Image -->
                                            <div class="flex-shrink-0 mb-4 sm:mb-0 sm:mr-4">
                                                <img src="<%= item.image || '/images/placeholder.jpg' %>"
                                                    alt="<%= item.name || 'Unnamed Product' %>"
                                                    class="w-16 h-16 rounded-lg object-cover border border-gray-200">
                                            </div>

                                            <!-- Product Details -->
                                            <div class="flex-1 min-w-0">
                                                <h3 class="text-lg font-medium text-gray-900 mb-1">
                                                    <%= item.name || 'Unnamed Product' %>
                                                </h3>
                                                <p class="text-sm text-gray-600 mb-1">₹<%= (item.price ||
                                                        0).toLocaleString() %>
                                                        per item</p>
                                                <% if (item.stock===0) { %>
                                                    <p class="text-xs text-red-500 font-medium">Out of stock</p>
                                                    <% } else { %>
                                                        <p class="text-xs text-gray-400">
                                                            <%= item.stock %> in stock
                                                        </p>
                                                        <% } %>
                                            </div>

                                            <!-- Quantity Controls -->
                                            <div class="flex items-center space-x-2 mt-4 sm:mt-0 sm:mx-4">
                                                <button
                                                    class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-50 transition-colors minus-btn <%= (item.quantity <= 1 || !item.quantity) ? 'opacity-50 cursor-not-allowed' : '' %> btn"
                                                    data-item-id="<%= item._id %>"
                                                    data-quantity="<%= item.quantity || 1 %>">
                                                    <i data-lucide="minus" class="w-4 h-4"></i>
                                                </button>
                                            <input type="number" value="<%= item.quantity || 1 %>" min="1" max="<%= item.stock || 0 %>" data-id="<%= item._id %>"
                                                class="w-14 text-center border border-gray-300 rounded-md py-1 focus:outline-none qty-input"
                                                onkeydown="return false" onchange="updateQuantity('<%= item._id %>', this.value)">
                                                <button
                                                    class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-50 transition-colors plus-btn <%= (item.quantity >= item.stock || !item.stock) ? 'opacity-50 cursor-not-allowed' : '' %> btn"
                                                    data-item-id="<%= item._id %>"
                                                    data-quantity="<%= item.quantity || 1 %>">
                                                    <i data-lucide="plus" class="w-4 h-4"></i>
                                                </button>
                                            </div>

                                            <!-- Price and Remove -->
                                            <div class="flex items-center space-x-4 mt-4 sm:mt-0">
                                                <div class="text-right">
                                                    <p class="text-lg font-semibold text-gray-900 item-total"
                                                        data-id="<%= item._id %>">₹<%= (item.totalPrice ||
                                                            0).toLocaleString() %>
                                                    </p>
                                                </div>
                                                <button type="button" onclick="removeItem('<%= item._id %>')"
                                                    class="text-red-500 hover:text-red-700 transition-colors p-2 btn">
                                                    <i data-lucide="trash-2" class="w-5 h-5"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <% }); %>
                                            <% } %>
                        </div>
                    </div>
                </div>

                <!-- Order Summary Section -->
                <div class="lg:col-span-4 mt-6 lg:mt-0">
                    <div class="bg-white rounded-lg shadow-sm p-6 sticky top-6">
                        <h2 class="text-lg font-semibold text-gray-900 mb-4">Order Summary</h2>

                        <!-- Pricing Details -->
                        <div class="space-y-3 mb-6">
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-600">Subtotal (<span id="total-items">
                                        <%= totalQuantity || 0 %>
                                    </span> items)</span>
                                <span class="font-medium" id="cart-subtotal">₹<%= (subTotal || 0).toLocaleString() %>
                                        </span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-600">Tax (5%)</span>
                                <span class="font-medium" id="cart-tax">₹<%= (tax || 0).toLocaleString() %></span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-600">Shipping</span>
                                <span class="font-medium" id="cart-shipping">
                                    <%= (shipping || 0)===0 ? 'FREE' : `₹${(shipping || 0)}` %>
                                </span>
                            </div>
                            <div class="border-t pt-3">
                                <div class="flex justify-between">
                                    <span class="text-base font-semibold text-gray-900">Total</span>
                                    <span class="text-lg font-bold text-gray-900" id="cart-total">₹<%= (total ||
                                            0).toLocaleString() %></span>
                                </div>
                            </div>
                        </div>

                        <!-- Free Delivery Notice -->
                        <div class="bg-green-50 border border-green-200 rounded-md p-3 mb-4">
                            <p class="text-sm text-green-700">
                                <i data-lucide="truck" class="w-4 h-4 inline mr-1"></i>
                                <%= deliveryMessage || 'Congrats free delivery on order above ₹1000' %>
                            </p>
                        </div>

                        <!-- Coupon Section -->
                        

                        <!-- Checkout Button -->
                        <button id="checkoutBtn" onclick="proceedToCheckout()"
                            class="w-full bg-blue-600 text-white py-3 rounded-md font-medium hover:bg-blue-700 transition-colors btn <%= (cartItems && cartItems.length === 0) ? 'opacity-50 cursor-not-allowed' : '' %>"
                            <%=(cartItems && cartItems.length===0) ? 'disabled' : '' %>>
                            Proceed to Checkout
                        </button>

                        <!-- Continue Shopping Link -->
                        <div class="mt-4 text-center">
                            <a href="/" class="text-sm text-blue-600 hover:text-blue-700 transition-colors">
                                <i data-lucide="arrow-left" class="w-4 h-4 inline mr-1"></i>
                                Continue Shopping
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <footer>
            <%- include('../partials/user/footer.ejs') %>
        </footer>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <!-- Toast Container -->
        <div id="toastContainer" class="toast-container"></div>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                lucide.createIcons();

                document.querySelectorAll('.plus-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const itemId = btn.getAttribute('data-item-id');
                        const currentQuantity = parseInt(btn.getAttribute('data-quantity'));
                        updateQuantity(itemId, currentQuantity + 1);
                    });
                });

                document.querySelectorAll('.minus-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const itemId = btn.getAttribute('data-item-id');
                        const currentQuantity = parseInt(btn.getAttribute('data-quantity'));
                        updateQuantity(itemId, currentQuantity - 1);
                    });
                });
            });

            function showToast(message, type = 'success') {
                const toastContainer = document.getElementById('toastContainer');
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;

                const icon = type === 'success' ? 'ri-check-line' : 'ri-error-warning-line';
                const iconColor = type === 'success' ? 'text-green-600' : 'text-red-600';

                toast.innerHTML = `
                <div class="flex items-center gap-3">
                    <i class="${icon} ${iconColor}"></i>
                    <span class="text-gray-900 font-medium">${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-auto text-gray-400 hover:text-gray-600">
                        <i class="ri-close-line"></i>
                    </button>
                </div>
            `;

                toastContainer.appendChild(toast);
                setTimeout(() => toast.classList.add('show'), 100);
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                }, 4000);
            }

            async function updateQuantity(itemId, newQuantity) {
                    try {
                        const response = await fetch('/cart', {
                            method: 'PATCH',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ itemId, quantity: parseInt(newQuantity) })
                        });

                        const result = await response.json();
                        if (result.success) {
                            // ✅ Success Toast
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'success',
                                title: 'Quantity Updated',
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true
                            });

                            const qtyInput = document.querySelector(`input[data-id="${itemId}"]`);
                            if (qtyInput) qtyInput.value = result.itemQuantity;

                            const itemTotalEl = document.querySelector(`.item-total[data-id="${itemId}"]`);
                            if (itemTotalEl) {
                                const itemTotal = result.itemTotal || (result.price * result.itemQuantity);
                                itemTotalEl.textContent = ` ₹${itemTotal.toLocaleString()}`;
                            }

                            const subtotalEl = document.getElementById('cart-subtotal');
                            if (subtotalEl) subtotalEl.textContent = `₹${result.subTotal.toLocaleString()}`;

                            const taxEl = document.getElementById('cart-tax');
                            if (taxEl) taxEl.textContent = `₹${result.tax.toLocaleString()}`;

                            const shippingEl = document.getElementById('cart-shipping');
                            if (shippingEl) {
                                shippingEl.textContent = result.shipping === 0 ? 'FREE' : `₹${result.shipping}`;
                            }

                            const totalEl = document.getElementById('cart-total');
                            if (totalEl) totalEl.textContent = `₹${result.total.toLocaleString()}`;

                            const totalQtyEl = document.getElementById('total-items');
                            if (totalQtyEl) totalQtyEl.textContent = `${result.totalQuantity} items`;

                            const itemRow = document.querySelector(`div[data-item-id="${itemId}"]`);
                            if (itemRow) {
                                const minusBtn = itemRow.querySelector('.minus-btn');
                                const plusBtn = itemRow.querySelector('.plus-btn');
                                if (minusBtn) minusBtn.setAttribute('data-quantity', result.itemQuantity);
                                if (plusBtn) plusBtn.setAttribute('data-quantity', result.itemQuantity);

                                updateButtonStates(itemId, result.itemQuantity, result.stock);
                            }
                        } else {
                            // ❌ Error Toast
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: result.message || 'Failed to update quantity',
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true
                            });
                        }
                    } catch (error) {
                        console.error('Update Quantity Error:', error);
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Failed to update quantity',
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });
                    }
                }


            function updateButtonStates(itemId, quantity, stock) {
                const itemRow = document.querySelector(`div[data-item-id="${itemId}"]`);
                if (!itemRow) return;

                const minusBtn = itemRow.querySelector('.minus-btn');
                const plusBtn = itemRow.querySelector('.plus-btn');
                const qtyInput = document.querySelector(`input[data-id="${itemId}"]`);

                if (minusBtn) {
                    minusBtn.disabled = quantity <= 1;
                    minusBtn.classList.toggle('opacity-50', quantity <= 1);
                    minusBtn.classList.toggle('cursor-not-allowed', quantity <= 1);
                }
                if (plusBtn) {
                    plusBtn.disabled = quantity >= stock;
                    plusBtn.classList.toggle('opacity-50', quantity >= stock);
                    plusBtn.classList.toggle('cursor-not-allowed', quantity >= stock);
                }
                if (qtyInput) {
                    qtyInput.max = stock;
                    qtyInput.value = quantity;
                }
            }

            async function removeItem(productId) {
                Swal.fire({
                    title: 'Remove Item?',
                    text: 'Remove this item from your cart?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#dc2626',
                    cancelButtonColor: '#6b7280',
                    confirmButtonText: 'Yes, remove it'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        try {
                            const response = await fetch(`/cart/${productId}`, {
                                method: 'DELETE'
                            });
                            const result = await response.json();

                            if (result.success) {
                                showToast('Item Removed', 'success');
                                const itemRow = document.querySelector(`div[data-item-id="${productId}"]`);
                                if (itemRow) itemRow.remove();
                                window.location.reload();
                            } else {
                                showToast(result.message || 'Failed to remove item', 'error');
                            }
                        } catch (error) {
                            showToast('Failed to remove item', 'error');
                        }
                    }
                });
            }

            

            async function proceedToCheckout() {
                try {
                    const response = await fetch('/checkout', {
                        method: 'POST',
                    });

                    const data = await response.json();

                    if (!data.success) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Cannot Proceed',
                            html: Array.isArray(data.item)
                                ? data.item.map(i => `<p>${i.name}: ${i.reason}</p>`).join('')
                                : `<p>${data.message || 'Unknown error'}</p>`,
                            confirmButtonText: 'OK'
                        });
                        return;
                    } else if (data.success) {
                        window.location.href = '/checkout';
                    }
                } catch (err) {
                    console.error('Error:', err);
                    Swal.fire('Something went wrong!', '', 'error');
                }
            }
        </script>
</body>

</html>