<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - Your Store</title>
    <link rel="stylesheet" href="/styles/output.css">
    <link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .content-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 2rem;
            align-items: flex-start;
        }

        .card {
            background-color: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .coupon-error {
            display: block;
            margin-top: 6px;
            font-size: 0.9rem;
            font-weight: 500;
            color: #dc2626;
            /* Tailwind red-600 */
            font-family: 'Inter', 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            letter-spacing: 0.3px;
            transition: opacity 0.3s ease-in-out;
        }

        .coupon-error.hidden {
            opacity: 0;
        }

        .coupon-error.visible {
            opacity: 1;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .order-review .item-list {
            max-height: 300px;
            overflow-y: auto;
            transition: max-height 0.3s ease-in-out;
        }

        .order-review.collapsed .item-list {
            max-height: 0;
            overflow: hidden;
        }

        .tooltip {
            position: relative;
            display: inline-block;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 120px;
            background-color: #333;
            color: #fff;
            text-align: center;
            padding: 5px;
            border-radius: 6px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -60px;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

        .address-card {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .address-card .address-type {
            font-size: 0.875rem;
            color: #1f2937;
            font-weight: 500;
        }

        .address-card .address-details {
            font-size: 0.875rem;
            color: #1f2937;
            line-height: 1.4;
        }

        .address-card .address-phone {
            font-size: 0.75rem;
            color: #666;
        }

        input[name="selectedAddress"].peer:checked~div {
            border-color: #3b82f6;
            background-color: #eff6ff;
            border-width: 2px;
        }

        input[name="paymentMethod"].peer:checked~div {
            border-color: #3b82f6;
            background-color: #eff6ff;
            border-width: 2px;
        }

        @media (max-width: 1023px) {
            .content-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>

<body class="bg-gray-50 font-sans">
    <%- include('../partials/user/newheader.ejs') %>
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="content-grid">
                <!-- Left Section -->
                <div class="space-y-6">
                    <!-- Order Review -->
                    <div class="card order-review">
                        <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                            <i class="ri-shopping-cart-2-line text-blue-600"></i> Order Review
                            <button id="toggleReview"
                                class="ml-auto text-blue-600 text-sm hover:underline">Toggle</button>
                        </h2>
                        <% if (cartItems && cartItems.length> 0) { %>
                            <div class="item-list divide-y divide-gray-200">
                                <% cartItems.forEach(function(item) { %>
                                    <div class="flex flex-col sm:flex-row items-center py-4 gap-4">
                                        <img src="<%= item.image || '/images/placeholder.jpg' %>" alt="<%= item.name %>"
                                            class="w-16 h-16 rounded-lg object-cover border border-gray-200">
                                        <div class="flex-1 min-w-0">
                                            <div class="font-medium text-gray-900">
                                                <%= item.name %>
                                            </div>
                                            <% if (item.variation) { %>
                                                <div class="text-xs text-gray-500 mb-1">
                                                    <%= item.variation %>
                                                </div>
                                                <% } %>
                                                    <div class="text-sm text-gray-500">Qty: <%= item.quantity %>
                                                    </div>
                                        </div>
                                        <div class="text-right">
                                            <% if (item.price !==undefined && item.price !==null) { %>
                                                <div class="text-sm text-gray-700">₹<%= item.price.toLocaleString() %> x
                                                        <%= item.quantity %>
                                                </div>
                                                <% } else { %>
                                                    <div class="text-sm text-red-500">Price not available</div>
                                                    <% } %>
                                                        <div class="text-base font-semibold text-gray-900">₹<%=
                                                                (item.price * item.quantity).toLocaleString() %>
                                                        </div>
                                        </div>
                                    </div>
                                    <% }) %>
                            </div>
                            <div class="flex justify-end mt-4">
                                <span class="text-gray-700 font-medium">Items Total: </span>
                                <span class="ml-2 text-lg font-bold text-gray-900">₹<%= subTotal.toLocaleString() %>
                                </span>
                            </div>
                            <% } else { %>
                                <div class="text-center text-gray-500 py-8">
                                    <i class="ri-shopping-bag-line text-3xl mb-2"></i><br>
                                    No items in your checkout.
                                </div>
                                <% } %>
                    </div>
                    <!-- Delivery Address -->
                    <div class="card" id="deliveryAddressSection">
                        <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                            <i class="ri-map-pin-line text-blue-600"></i> Delivery Address
                        </h2>
                        <% if (addresses && addresses.length> 0) { %>
                            <div class="grid sm:grid-cols-2 gap-4 mb-4">
                                <% addresses.forEach(function(address, idx) { %>
                                    <label class="block cursor-pointer">
                                        <input type="radio" name="selectedAddress" value="<%= address._id %>"
                                            class="peer hidden" <%=address.isDefault ? 'checked' : '' %>>
                                        <div class="border rounded-lg p-4 transition-all hover:border-blue-400">
                                            <div class="flex items-center justify-between mb-2">
                                                <span class="font-medium text-gray-900">
                                                    <%= address.fullName %>
                                                </span>
                                                <div class="tooltip">
                                                    <button type="button"
                                                        onclick="window.location.href='/edit/addresses/<%= address._id %>'"
                                                        class="text-xs text-blue-600 hover:underline">Edit</button>
                                                    <span class="tooltiptext">Click to edit this address</span>
                                                </div>
                                            </div>
                                            <div class="address-card">
                                                <div class="address-type">
                                                    <%= address.type || 'Home' %>
                                                </div>
                                                <div class="address-details">
                                                    <%= address.address %>
                                                        <%= address.district || address.city %>
                                                            <%= address.state %> - <%= address.pinCode %>
                                                </div>
                                                <div class="address-phone">Phone: <%= address.mobileNumber %>
                                                </div>
                                            </div>
                                        </div>
                                    </label>
                                    <% }) %>
                            </div>
                            <% } else { %>
                                <div class="text-center text-gray-500 py-4">No addresses available. <a
                                        href="/account/add/addresses" class="text-blue-600 hover:underline">Add one
                                        now</a>.
                                </div>
                                <% } %>
                                    <button type="button" onclick="window.location.href='/account/addresses'"
                                        class="mt-2 px-4 py-2 bg-blue-50 text-blue-700 rounded-md hover:bg-blue-100 flex items-center gap-2">
                                        <i class="ri-add-line"></i> Add New Address
                                    </button>
                    </div>
                    <!-- Payment Method -->
                    <div class="card">
                        <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                            <i class="ri-bank-card-line text-blue-600"></i> Payment Method
                        </h2>
                        <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                            <!-- COD -->
                            <label
                                class="block cursor-pointer <%= total > 4000 ? 'pointer-events-none opacity-50' : '' %>">
                                <input type="radio" name="paymentMethod" value="COD" class="peer hidden" <%=total <=4000
                                    ? 'checked' : 'disabled' %>
                                >
                                <div
                                    class="border rounded-lg p-4 flex flex-col items-center transition-all duration-150 peer-checked:border-blue-600 peer-checked:bg-blue-50">
                                    <i class="ri-money-rupee-circle-line text-2xl text-blue-600 mb-1"></i>
                                    <span class="font-medium text-gray-900">Cash on Delivery</span>
                                </div>
                                <% if (total> 4000) { %>
                                    <div class="text-xs text-red-600 mt-2 text-center">
                                        COD is available only for orders up to ₹4000
                                    </div>
                                    <% } %>
                            </label>


                            <!-- Online Payment -->
                            <label class="block cursor-pointer">
                                <input type="radio" name="paymentMethod" value="ONLINE" class="peer hidden">
                                <div
                                    class="border rounded-lg p-4 flex flex-col items-center transition-all duration-150 peer-checked:border-blue-600 peer-checked:bg-blue-50">
                                    <i class="ri-bank-line text-2xl text-blue-600 mb-1"></i>
                                    <span class="font-medium text-gray-900">Online Payment</span>
                                </div>
                            </label>

                            <!-- Wallet Payment -->
                            <label
                                class="block cursor-pointer <%= (wallet && wallet.balance >= total) ? '' : 'opacity-50 cursor-not-allowed' %>">
                                <input type="radio" name="paymentMethod" value="WALLET" class="peer hidden" <%=(wallet
                                    && wallet.balance>= total) ? '' : 'disabled' %>>
                                <div
                                    class="border rounded-lg p-4 flex flex-col items-center transition-all duration-150 peer-checked:border-blue-600 peer-checked:bg-blue-50">
                                    <i class="ri-wallet-3-line text-2xl text-blue-600 mb-1"></i>
                                    <span class="font-medium text-gray-900">Wallet Payment</span>
                                    <span class="text-xs text-gray-500 mt-1">Balance: ₹<%= wallet ?
                                            wallet.balance.toLocaleString() : '0' %></span>
                                    <% if (!wallet || wallet.balance < total) { %>
                                        <div class="text-xs text-red-600 mt-2 text-center">
                                            Insufficient balance
                                        </div>
                                        <% } %>
                                </div>
                            </label>
                        </div>
                    </div>
                </div>
                <!-- Right Section -->
                <div class="space-y-6">
                    <!-- Coupon Box -->
                    <div class="card">
                        <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                            <i class="ri-ticket-line text-blue-600"></i> Coupon
                        </h2>

                        <div class="flex space-x-2 mb-2 relative">
                            <input type="text" id="couponCode" placeholder="Enter coupon code"
                                class="flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent pr-8">





                            <button  id="ApplyButtonId"  onclick="applyCoupon()"
                                class="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors text-sm font-medium">
                                Apply
                            </button>


                            <button id="removeBtn" onclick="removeCoupon()" style="display: none; "
                                class="px-4 py-2 bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors text-sm font-medium">
                                Remove
                            </button>
                        </div>

                        <button class="text-xs text-blue-600 hover:underline" id="ShowAvailableCoupon" type="button">
                            View Available Coupons
                        </button>

                        <span id="couponError" style="color:red; display:none;"></span>
                    </div>

                    <!-- Order Summary Card -->
                    <div class="card">
                        <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                            <i class="ri-file-list-3-line text-blue-600"></i> Order Summary
                        </h2>
                        <% if (cartItems && cartItems.length> 0) { %>
                            <div class="divide-y divide-gray-200 mb-4">
                                <% cartItems.forEach(function(item) { %>
                                    <div class="flex items-center py-3 gap-4">
                                        <img src="<%= item.image || '/images/placeholder.jpg' %>" alt="<%= item.name %>"
                                            class="w-12 h-12 rounded-lg object-cover border border-gray-200">
                                        <div class="flex-1 min-w-0">
                                            <div class="font-medium text-gray-900 text-sm">
                                                <%= item.name %>
                                            </div>
                                            <div class="text-xs text-gray-500">Qty: <%= item.quantity %>
                                            </div>
                                        </div>
                                        <div class="text-right text-sm text-gray-700">₹<%= (item.price *
                                                item.quantity).toLocaleString() %>
                                        </div>
                                    </div>
                                    <% }) %>
                            </div>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Subtotal</span>
                                    <span>₹<%= subTotal.toLocaleString() %></span>
                                </div>



                                <div class="flex justify-between">
                                    <span class="text-gray-600">Shipping</span>
                                    <% if (shipping===0) { %>
                                        <span class="text-green-600 font-medium">FREE</span>
                                        <% } else { %>
                                            <span class="text-gray-700 font-medium">₹<%= shipping.toLocaleString() %>
                                                    </span>
                                            <% } %>
                                </div>

                                <!-- ✅ New Discount row -->
                                <!-- Product/Category Offer Discount -->
                                <div class="flex justify-between text-blue-600 font-medium" id="offer-discount-row"
                                    style='display:flex'>
                                    <span>Product Offer Discount</span>
                                    <span id="offer-discount-amount">- ₹<%= offer ? offer.toLocaleString() : 0 %></span>
                                </div>

                                <!-- Coupon Discount -->
                                <div class="flex justify-between text-green-600 font-medium" id="coupon-discount-row"
                                    style="display:flex">
                                    <span>Coupon Discount</span>
                                    <span id="coupon-discount-amount">- ₹<%= discount ? discount.toLocaleString() : 0 %>
                                            </span>
                                </div>



                                <div class="flex justify-between font-semibold border-t border-gray-300 pt-2 mt-2">
                                    <span>Total</span>
                                    <span id="total-price" data-total-price="<%= total  %>">
                                        ₹<%= (total ).toLocaleString() %>
                                    </span>
                                </div>

                            </div>
                            <% } %>
                    </div>
                    <!-- Place Order Button -->
                    <div class="card">
                        <button id="placeOrderBtn" type="button"
                            class="w-full bg-blue-600 text-white py-3 px-4 rounded-md font-medium hover:bg-blue-700 transition-colors text-lg <%= subTotal === 0 || total === 0 ? 'opacity-50 cursor-not-allowed' : '' %>" <%= subTotal === 0 || total === 0 ? 'disabled' : '' %>>Place
                            Order</button>
                    </div>
                </div>
            </div>
        </div>
        <input type="hidden" id="cartItems" value='<%- JSON.stringify(cartItems || []) %>'>
        <%- include('../partials/user/footer.ejs') %>
            <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    // Toggle order review section
                    const toggleReviewBtn = document.getElementById('toggleReview');
                    const orderReview = document.querySelector('.order-review');

                    toggleReviewBtn.addEventListener('click', function () {
                        orderReview.classList.toggle('collapsed');
                        toggleReviewBtn.textContent = orderReview.classList.contains('collapsed') ? 'Show' : 'Hide';
                    });

                    // View Available Coupons button
                    const viewCouponsBtn = document.getElementById('ShowAvailableCoupon');
                    viewCouponsBtn.addEventListener('click', async function () {
                        try {
                            const response = await fetch('/coupons/available', {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                            });

                            const coupons = await response.json();

                            if (!response.ok) {
                                throw new Error(coupons.message || 'Failed to fetch coupons');
                            }

                            const couponList = coupons.data?.map(coupon => `
  <div class="bg-white shadow rounded-lg p-4 mb-4 flex justify-between items-center hover:shadow-lg transition">
    
    <!-- Coupon Info -->
    <div class="flex-1 pr-4">
      <p class="font-bold text-gray-900 text-lg">${coupon.code}</p>
      <p class="text-gray-600 text-sm mt-1">${coupon.description}</p>
      <p class="mt-1 text-sm text-blue-600">
        ${coupon.discountType === 'percentage'
                                    ? `${coupon.discount}% Off`
                                    : `₹${coupon.discount} Flat Off`}
        ${coupon.minPurchase ? `(Min Purchase: ₹${coupon.minPurchase})` : ''}
        ${coupon.maxDiscount ? `(Max Discount: ₹${coupon.maxDiscount})` : ''}
      </p>
      <p class="text-xs text-gray-400 mt-1">Expires: ${new Date(coupon.expiry).toLocaleDateString()}</p>
    </div>

    <!-- Apply Button -->
    <button 
      class="apply-coupon-btn px-4 py-2 rounded font-medium text-sm flex-shrink-0 
             ${coupon.alreadyUsed
                                    ? 'bg-gray-400 text-gray-700 cursor-not-allowed'
                                    : 'bg-blue-600 text-white hover:bg-blue-700 transition'}"
      data-coupon-code="${coupon.code}"
      ${coupon.alreadyUsed ? 'disabled' : ''}
    >
      ${coupon.alreadyUsed ? 'Already Used' : 'Apply'}
    </button>
  </div>
`).join('');



                            Swal.fire({
                                title: 'Available Coupons',
                                html: `
                    <div class="max-h-96 overflow-y-auto">
                        ${couponList || '<p class="text-gray-500">No coupons available</p>'}
                    </div>
                `,
                                showCloseButton: true,
                                showConfirmButton: false,
                                customClass: {
                                    container: 'coupon-popup',
                                    popup: 'max-w-2xl w-full',
                                }
                            });

                            document.querySelectorAll('.apply-coupon-btn').forEach(button => {
                                button.addEventListener('click', function () {
                                    const couponCode = this.getAttribute('data-coupon-code');
                                    document.getElementById('couponCode').value = couponCode;
                                    Swal.close();
                                    applyCoupon();
                                });
                            });

                        } catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: error.message || 'Failed to load coupons',
                                timer: 3000,
                                showConfirmButton: false
                            });
                        }
                    });

                    // Apply coupon function
                    window.applyCoupon = async function () {
                        const couponCode = document.getElementById('couponCode').value.trim();
                        if (!couponCode) {
                            Swal.fire({
                                toast:true,
                                position:'top-end',
                                icon: 'warning',
                                title: 'No Coupon Code',
                                timer: 1000,
                                showConfirmButton: false
                            });
                            return;
                        }

                        try {
                            const response = await fetch('/coupons/apply', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    couponCode,
                                    cartItems: JSON.parse(document.getElementById('cartItems').value),
                                    total: parseFloat(document.getElementById('total-price').getAttribute('data-total-price'))
                                })
                            });

                            const result = await response.json();

                            if (!response.ok || response.success === false) {
                                document.getElementById("couponError").innerText = result.message || "Something went wrong";
                                document.getElementById("couponError").style.display = "block";
                                if (result.discount && result.newTotal && result.Code) {
                                    console.log()
                                    const totalElement = document.getElementById('total-price');
                                    totalElement.setAttribute('data-total-price', result.newTotal);
                                    totalElement.textContent = `₹${result.newTotal}`;
                                    
                                    const couponDiscountRow = document.getElementById("coupon-discount-row");
                                    const couponDiscountAmount = document.getElementById("coupon-discount-amount");
                                    const removeButton = document.getElementById('removeBtn')
                                    const DiscountInput = document.getElementById('couponCode')

                                    removeButton.style.display='flex' // if success show remove button
                                    DiscountInput.disabled = false; // if error remove disable input


                                    if (couponDiscountRow) {   // ✅ prevent null error
                                        if (result.discount > 0) {
                                            couponDiscountRow.style.display = "flex";
                                            couponDiscountAmount.textContent = `- ₹${result.discount.toLocaleString()}`;
                                        } else {
                                            couponDiscountAmount.textContent = 0
                                        }
                                    }

                                }
                                return; // stop here on error
                            }

                            // ✅ success case
                            const { newTotal, discount, couponId } = result;
                            const totalElement = document.getElementById('total-price');
                            const DiscountInput = document.getElementById('couponCode')
                            const appliedButton = document.getElementById('ApplyButtonId')
                            const removeButton = document.getElementById('removeBtn')
                            totalElement.setAttribute('data-total-price', newTotal);
                            totalElement.textContent = `₹${newTotal}`;

                            const couponDiscountRow = document.getElementById("coupon-discount-row");
                            const couponDiscountAmount = document.getElementById("coupon-discount-amount");

                           DiscountInput.disabled = true;

                            if (couponDiscountRow) {   // ✅ prevent null error
                                if (discount > 0) {
                                    couponDiscountRow.style.display = "flex";
                                    couponDiscountAmount.textContent = `- ₹${discount.toLocaleString()}`;
                                    appliedButton.style.display='none' //if success remove apply button
                                    removeButton.style.display ='flex' //if success show remove button 
                                } else {
                                    couponDiscountAmount.textContent = 0
                                }
                            }

                            window.couponApplied = true;
                            window.couponId = couponId;
                            document.getElementById("couponError").innerText = "";

                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'success',
                                title: 'Coupon Applied',
                                showConfirmButton: false,
                                timer: 1000,
                                timerProgressBar: true
                            });


                        } catch (error) {
                            document.getElementById("couponError").innerText = error.message;
                            document.getElementById("couponError").style.display = "block";
                        }
                    };

                    const placeOrderBtn = document.getElementById('placeOrderBtn');
                    if (placeOrderBtn) {
                        placeOrderBtn.addEventListener('click', async function () {
                            const addressSelected = document.querySelector('input[name="selectedAddress"]:checked');
                            const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
                            const totalPriceEl = document.getElementById('total-price');
                            const totalPrice = totalPriceEl ? parseFloat(totalPriceEl.getAttribute('data-total-price')) : 0;
                            const cartItems = JSON.parse(document.getElementById('cartItems').value);
                            const couponApplied = false;
                            const couponId = null;

                            if (!addressSelected) {
                                return Swal.fire({
                                    toast:true,
                                    position:'top-end',
                                    icon: 'warning',
                                    title: 'Select Address',
                                    timer: 1500,
                                    showConfirmButton: false
                                });
                            }
                            if (!paymentMethod) {
                                return Swal.fire({
                                    toast:true,
                                    position:'top-end',
                                    icon: 'warning',
                                    timer: 1500,
                                    title: 'Select Payment Method',
                                    showConfirmButton: false
                                });
                            }

                            const totalQuantity = cartItems.reduce((sum, item) => sum + item.quantity, 0);
                           

                            const confirmation = await Swal.fire({
                                title: 'Confirm Your Order',
                                html: `
        <div style="text-align:left; font-size:15px;">
          <strong>Total Items:</strong> ${totalQuantity} <br>
          <strong>Total Price:</strong> ₹${totalPrice.toFixed(2)} <br>
          <strong>Payment Method:</strong> ${paymentMethod}
        </div>
      `,
                                icon: 'question',
                                showCancelButton: true,
                                confirmButtonText: 'Place Order',
                                cancelButtonText: 'Cancel',
                                confirmButtonColor: '#16a34a',
                                cancelButtonColor: '#d33',
                                background: '#f0f9ff'
                            });

                            if (!confirmation.isConfirmed) return;

                            try {
                                if (paymentMethod === 'ONLINE') {
                                    try {
                                        // 1️⃣ Get Razorpay key
                                        const keyRes = await fetch('/payment/get-key');
                                        const { key } = await keyRes.json();

                                        // 2️⃣ Create DB order + Razorpay order from backend
                                        const orderRes = await fetch('/payment/create-order', {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({ addressId: addressSelected.value })
                                        });
                                        
                                        const orderData = await orderRes.json();

                                        if (!orderRes.ok || !orderData.success) {
                                            return Swal.fire({
                                                icon: 'error',
                                                title: 'Order Creation Failed',
                                                text: orderData.message || 'Could not initiate the payment process. Please try again.',
                                                confirmButtonColor: '#d33'
                                            });
                                        }

                                        const { razorpayOrder, user, userAddress, orderId } = orderData;

                                        // 3️⃣ Razorpay checkout options 
                                        const options = {
                                            key,
                                            amount: razorpayOrder.amount,
                                            currency: razorpayOrder.currency,
                                            name: "Giftora",
                                            description: "Order Payment",
                                            image: '/images/header/giftora.png',
                                            order_id: razorpayOrder.id, // Razorpay order ID
                                            prefill: {
                                                name: userAddress.fullName,
                                                email: user.email,
                                                contact: userAddress.mobileNumber
                                            },

                                            // 4️⃣ Payment handler
                                            handler: async function (response) {
                                                try {
                                                    const verifyRes = await fetch('/payment/verify-payment', {
                                                        method: 'POST',
                                                        headers: { 'Content-Type': 'application/json' },
                                                        body: JSON.stringify({
                                                            razorpay_order_id: response.razorpay_order_id,
                                                            razorpay_payment_id: response.razorpay_payment_id,
                                                            razorpay_signature: response.razorpay_signature,
                                                            orderId //  DB orderId
                                                        })
                                                    });
                                                    
                                                    const verifyResult = await verifyRes.json();

                                                    if (verifyResult.success) {
                                                        Swal.fire({
                                                            icon: 'success',
                                                            title: 'Payment Successful!',
                                                            text: 'Your order has been placed successfully.',
                                                            confirmButtonColor: '#3b82f6'
                                                        }).then(() => {
                                                            window.location.href = `/checkout/order-success?orderId=${verifyResult.order.customOrderId}`;
                                                        });
                                                    } else {
                                                        Swal.fire({
                                                            icon: 'error',
                                                            title: 'Payment Verification Failed',
                                                            text: verifyResult.message || 'We could not verify your payment.',
                                                            confirmButtonColor: '#d33'
                                                        }).then(() => {
                                                            window.location.href = `/payment/failure-page/${orderId}`;
                                                        });
                                                    }
                                                } catch (verifyError) {
                                                     console.error("Payment verification fetch error:", verifyError);
                                                     Swal.fire({
                                                         icon: 'error',
                                                         title: 'Verification Error',
                                                         text: 'There was a problem verifying your payment. Please contact support.',
                                                         confirmButtonColor: '#d33'
                                                     }).then(() => {
                                                         window.location.href = `/payment/failure-page/${orderId}`;
                                                     });
                                                }
                                            },
 
                                            // 5️⃣ Handle modal close without payment
                                            modal: {
                                                ondismiss: async function () {
                                                    await fetch('/payment/failure', {
                                                        method: 'POST',
                                                        headers: { 'Content-Type': 'application/json' },
                                                        body: JSON.stringify({ orderId }) // use DB orderId
                                                    });
                                                    Swal.fire({
                                                        icon: 'error',
                                                        title: 'Payment Not Completed',
                                                        text: 'Your payment was not completed. You can try again.',
                                                        confirmButtonColor: '#d33'
                                                    });
                                                }
                                            },

                                            theme: { color: "#3399cc" }
                                        };

                                        const rzp = new Razorpay(options);

                                        // 6️⃣ Razorpay "payment.failed" event
                                        rzp.on('payment.failed', function () {
                                            window.location.href = `/payment/failure-page/${orderId}`; // ✅ DB orderId
                                        });

                                        // 7️⃣ Open Razorpay modal
                                        rzp.open();

                                    } catch (err) {
                                        console.error("Payment init error:", err.message);
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: 'Something went wrong while starting payment.',
                                            confirmButtonColor: '#d33'
                                        });
                                    }
                                } else {
                                    // COD order
                                    const response = await fetch('/checkout/place-order', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({
                                            address: addressSelected.value,
                                            paymentMethod,
                                            totalPrice,
                                            discountPrice: 0,
                                            finalPrice: totalPrice,
                                            couponApplied,
                                            couponId,
                                        })
                                    });

                                    const result = await response.json();

                                    if (result.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Order Placed!',
                                            text: 'Your order has been placed successfully.',
                                            confirmButtonColor: '#3b82f6'
                                        }).then(() => {
                                            window.location.href = `/checkout/order-success?orderId=${result.orderId}`;
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Failed',
                                            text: result.message || 'Order could not be placed.',
                                            confirmButtonColor: '#d33'
                                        });
                                    }
                                }
                            } catch (err) {
                                console.error(err);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Server Error',
                                    text: 'Something went wrong. Please try again later.',
                                    confirmButtonColor: '#d33'
                                });
                            }
                        });
                    }
                }); // <-- Add this closing brace for DOMContentLoaded

               async function removeCoupon() {
                    const input = document.getElementById("couponCode");
                               fetch("/coupons/remove", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                            })
                                .then(res => res.json())
                                .then(data => {
                                    const DiscountInput = document.getElementById('couponCode')
                                    input.value = "";
                                    document.getElementById("couponError").style.display = "none";
                                    document.getElementById('ApplyButtonId').style.display = 'flex';
                                    document.getElementById('removeBtn').style.display = 'none';
                                    DiscountInput.disabled = false;
                                    updateOrderSummary(data.summary); // update the summary
                                    Swal.fire({
                                        toast:true,
                                        icon: 'success',
                                        position:'top-end',
                                        title: 'Removed!',
                                        timer: 1000,
                                        showConfirmButton: false
                                    });
                                })
                                .catch(err => {
                                    console.error(err);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops!',
                                        text: 'Something went wrong. Please try again.',
                                    });
                                });
                        
                    
                }

                function updateOrderSummary(summary) {
                    if (!summary) return;

                    // Safe defaults if undefined
                    const couponDiscount = summary.couponDiscount || 0;
                    const total = summary.total || 0;

                    // Grab DOM elements
                    const totalElem = document.getElementById("total-price");
                    const couponAmount = document.getElementById("coupon-discount-amount");

                    if (!totalElem || !couponAmount) {
                        console.warn("Order summary elements missing!");
                        return;
                    }

                    // Update only coupon discount and total
                    couponAmount.innerText = `- ₹${couponDiscount.toLocaleString()}`;
                    totalElem.innerText = `₹${total.toLocaleString()}`;
                }


            </script>

</body>

</html>