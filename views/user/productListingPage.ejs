<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product Listing - Premium Store</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
  <style>
    :root {
      --primary-color: #2c3e50;
      --secondary-color: #3498db;
      --accent-color: #e74c3c;
      --success-color: #27ae60;
      --warning-color: #f39c12;
      --light-gray: #f8f9fa;
      --medium-gray: #6c757d;
      --dark-gray: #343a40;
      --white: #ffffff;
      --shadow-light: 0 2px 10px rgba(0, 0, 0, 0.05);
      --shadow-medium: 0 4px 20px rgba(0, 0, 0, 0.1);
      --shadow-heavy: 0 8px 30px rgba(0, 0, 0, 0.15);
      --border-radius: 8px;
      --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* Mobile-first base styles */
    * {
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.5;
      color: var(--dark-gray);
      margin: 0;
      padding: 0;
      background-color: #fafbfc;
    }

    .sidebar.active {
      display: block;
    }

    .breadcrumb {
      display: flex;
      align-items: center;
      gap: 0.25rem;
      margin-bottom: 1rem;
      font-size: 0.75rem;
      color: var(--medium-gray);
      flex-wrap: wrap;
    }

    .breadcrumb a {
      color: var(--dark-gray);
      text-decoration: none;
      transition: var(--transition);
    }

    .breadcrumb a:hover {
      color: var(--secondary-color);
    }

    .search-container {
      position: relative;
    }

    .search-input {
      padding-right: 70px; /* Make space for buttons */
    }

    .search-actions {
      position: absolute;
      right: 6px;
      top: 50%;
      transform: translateY(-50%);
      display: flex;
      gap: 4px;
    }

    .search-btn, .clear-search-btn {
      border: none;
      background-color: transparent;
      cursor: pointer;
      padding: 6px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.2s ease;
    }
    .search-btn:hover, .clear-search-btn:hover {
      background-color: #f0f0f0;
    }

    .breadcrumb-separator {
      color: var(--medium-gray);
    }

    .filter-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .filter-label {
      font-size: 0.875rem;
      font-weight: 500;
      color: var(--dark-gray);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .filter-select,
    .filter-input {
      padding: 0.75rem;
      border: 2px solid #e9ecef;
      border-radius: var(--border-radius);
      font-size: 0.875rem;
      outline: none;
      transition: var(--transition);
    }

    .filter-select:focus,
    .filter-input:focus {
      border-color: var(--secondary-color);
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }

    .price-range-container {
      display: flex;
      align-items: center;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .price-separator {
      color: var(--medium-gray);
    }

    .filter-actions {
      display: flex;
      gap: 0.5rem;
      flex-direction: column;
    }

    .btn {
      padding: 0.75rem 1.5rem;
      border-radius: var(--border-radius);
      font-size: 0.875rem;
      font-weight: 600;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      position: relative;
      overflow: hidden;
      justify-content: center;
    }

    .btn-primary, .btn-primary:hover {
      background: var(--primary-color);
      color: var(--white);
      border: 1px solid var(--primary-color);
    }

    .btn-primary:hover {
      background: #1a252f;
      transform: translateY(-1px);
    }

    .btn-secondary, .btn-secondary:hover {
      background: transparent;
      color: var(--accent-color);
      border: 1px solid var(--accent-color);
      position: relative;
    }

    .btn-secondary:hover {
      background: var(--accent-color);
      color: var(--white);
      transform: translateY(-1px);
    }

    .filter-toggle-btn {
      font-weight: 600;
    }

    .results-info {
      font-size: 0.875rem;
      color: var(--medium-gray);
    }

    .results-count {
      font-weight: 600;
      color: var(--dark-gray);
    }

    .product-card {
      display: flex;
      flex-direction: column;
      height: 100%;
      background: var(--white);
      border-radius: var(--border-radius);
      overflow: hidden;
      box-shadow: var(--shadow-light);
      border: 1px solid #e9ecef;
      transition: all 0.3s ease;
      cursor: pointer;
      position: relative;
    }

    .product-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-heavy);
    }

    .product-image {
      position: relative;
      aspect-ratio: 1 / 1;
      background: linear-gradient(45deg, #f8f9fa, #e9ecef);
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .product-img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
      transition: var(--transition);
      border: none;
      outline: none;
      cursor: pointer;
    }

    .product-card:hover .product-img {
      transform: scale(1.05);
    }

    .discount-badge {
      position: absolute;
      top: 1rem;
      left: 0.5rem;
      background: var(--accent-color);
      color: var(--white);
      padding: 0.25rem 0.5rem;
      border-radius: 20px;
      font-size: 0.75rem;
      font-weight: 600;
      z-index: 2;
    }

    .discount-badge.out-of-stock {
      background: var(--medium-gray);
    }

    .wishlist-btn {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: var(--white);
      border: none;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
      box-shadow: var(--shadow-light);
      z-index: 2;
    }

    .wishlist-btn:hover {
      background: var(--accent-color);
      color: var(--white);
    }

    .wishlist-btn.active i {
      color: var(--accent-color);
    }

    .product-info {
      display: flex;
      flex-direction: column;
      flex-grow: 1;
      padding: 1rem;
      min-height: auto;
    }

    .product-brand {
      color: var(--medium-gray);
      font-size: 0.75rem;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin-bottom: 0.5rem;
    }

    .product-name {
      font-size: 1rem;
      font-weight: 600;
      color: var(--dark-gray);
      line-height: 1.3;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      margin-bottom: 0.75rem;
    }

    .product-rating {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 0.75rem;
    }

    .stars {
      display: flex;
      gap: 0.125rem;
    }

    .star {
      color: #ffc107;
      font-size: 0.75rem;
    }

    .rating-count {
      color: var(--medium-gray);
      font-size: 0.75rem;
    }

    .product-prices {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 1rem;
      flex-wrap: wrap;
    }

    .current-price {
      font-size: 1.25rem;
      font-weight: 700;
      color: var(--primary-color);
    }

    .original-price {
      font-size: 1rem;
      color: var(--medium-gray);
      text-decoration: line-through;
    }

    .price-savings {
      background: var(--success-color);
      color: var(--white);
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.625rem;
      font-weight: 600;
    }

    .add-to-cart {
      margin-top: auto;
      width: 100%;
      background: var(--dark-gray);
      color: var(--white);
      border: none;
      padding: 0.75rem;
      border-radius: var(--border-radius);
      font-weight: 600;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }

    .add-to-cart:hover:not(:disabled) {
      background: var(--primary-color);
      transform: translateY(-1px);
    }

    .add-to-cart:disabled {
      background: var(--medium-gray);
      color: #adb5bd;
      cursor: not-allowed;
    }

    .page-link.active {
      background: var(--primary-color);
      color: var(--white);
      border-color: var(--primary-color);
    }

    .disabled {
      color: #adb5bd;
      border-color: #e9ecef;
      cursor: not-allowed;
    }

    .no-results {
      text-align: center;
      padding: 2rem 1rem;
      color: var(--medium-gray);
    }

    .no-results i {
      font-size: 3rem;
      margin-bottom: 1rem;
      opacity: 0.3;
    }

    .no-results h3 {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }

    .no-results p {
      font-size: 0.875rem;
    }

    .loading {
      text-align: center;
      padding: 2rem 1rem;
      font-size: 1rem;
      color: var(--medium-gray);
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: loading 1.5s infinite;
    }

    @keyframes loading {
      0% {
        background-position: 200% 0;
      }

      100% {
        background-position: -200% 0;
      }
    }
  </style>
</head>

<body>
  <%- include('../partials/user/newheader.ejs') %>

    <div class="container-lg mt-4">
      <div class="row">
      <!-- Sidebar Filters -->
      <aside class="col-lg-3 d-none d-lg-block" id="desktopSidebar">
        <nav class="breadcrumb">
          <a href="/home" class="home-breadcrumb" style="color: var(--dark-gray)">Home</a>
          <span class="breadcrumb-separator">/</span>
          <span>Shop</span>
        </nav>

        <div class="card shadow-sm">
          <div class="card-header bg-light">
            <h2 class="fs-5 mb-0 fw-semibold">
              <i class="fas fa-filter"></i>
              Search & Filter
            </h2>
          </div>
          <div class="card-body">
          <div class="search-container">
            <input type="text" id="searchInput" class="form-control search-input" placeholder="Search products..."
              value="<%= typeof search !== 'undefined' ? search : '' %>">
            <div class="search-actions">
              <button class="search-btn text-primary" id="searchBtn" title="Search">
                <i class="fas fa-search"></i>
              </button>
              <button class="clear-search-btn hidden text-danger" id="clearSearchBtn" title="Clear Search">
                <i class="fas fa-times"></i>
              </button>
            </div>
          </div>

          <div class="filters-grid mt-3">
            <div class="filter-group">
              <label class="filter-label">
                <i class="fas fa-list"></i> Category
              </label>
              <select id="categoryFilter" class="filter-select">
                <option value="">All Categories</option>
                <% cat.forEach((category)=> { %>
                  <option value="<%= category._id %>" <%=category._id.toString()===categoryFilter ? 'selected' : '' %>>
                    <%= category.name %>
                  </option>
                  <% }) %>
              </select>
            </div>

            <div class="filter-group">
              <label class="filter-label">
                <i class="fas fa-dollar-sign"></i> Price Range
              </label>
              <div class="price-range-container">
                <input type="number" id="minPrice" class="filter-input" placeholder="Min $" min="0"
                  value="<%= typeof minPrice !== 'undefined' ? minPrice : '' %>">
                <span class="price-separator">-</span>
                <input type="number" id="maxPrice" class="filter-input" placeholder="Max $" min="0"
                  value="<%= typeof maxPrice !== 'undefined' ? maxPrice : '' %>">
              </div>
            </div>

            <div class="filter-group">
              <label class="filter-label">
                <i class="fas fa-sort"></i> Sort By
              </label>
              <select id="sortBy" class="filter-select">
                <option value="createdAt-desc">Newest First</option>
                <option value="name-asc">Name: A to Z</option>
                <option value="name-desc">Name: Z to A</option>
                <option value="price-asc">Price: Low to High</option>
                <option value="price-desc">Price: High to Low</option>
              </select>
            </div>
          </div>

          <div class="d-grid gap-2 mt-3">
            <button class="btn btn-primary" id="applyFiltersBtn" title="Apply Filters">
              <i class="fas fa-check"></i>
              Apply
            </button>
            <button class="btn btn-outline-secondary" id="clearFiltersBtn" title="Clear All Filters">
              <i class="fas fa-eraser"></i>
              Clear
            </button>
          </div>
          </div>
        </div>
      </aside>

      <!-- Main Content -->
      <main class="col-lg-9">
        <!-- Mobile Filter Toggle & Results Header -->
        <div class="d-flex justify-content-between align-items-center mb-3">
          <button class="btn btn-outline-dark d-lg-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasFilters" aria-controls="offcanvasFilters">
            <i class="fas fa-filter"></i> Filters
          </button>
          <div class="results-info ms-auto ms-lg-0">
            Showing <span class="results-count fw-bold" id="resultsCount">
              <%= typeof totalProduct !=='undefined' ? totalProduct : 0 %>
            </span> products
          </div>
        </div>

        <!-- Results Section -->
        <div class="results-section bg-white p-3 p-md-4 rounded-3 shadow-sm">
          <!-- Products Grid -->
          <div class="row g-3 g-md-4" id="products-grid">
            <% if (products && products.length> 0) { %>
              <% for(let i=0; i < products.length; i++) { %>
                <div class="col-6 col-md-4">
                  <div class="product-card h-100" data-id="<%= products[i]._id %>">
                  <div class="product-image">
                    <% if (products[i].productImage) { %>
                      <a href="/productsDetails/<%= products[i]._id %>">
                        <img src="<%= products[i].productImage %>" alt="<%= products[i].productName %>"
                          class="product-img" data-id="<%= products[i]._id %>">
                      </a>
                      <% } else { %>
                        <div
                          style="display: flex; align-items: center; justify-content: center; height: 100%; color: var(--medium-gray); font-size: 1.1rem;">
                          <i class="fas fa-image" style="font-size: 3rem; opacity: 0.3;"></i>
                        </div>
                        <% } %>
                          <div class="discount-badge <%= products[i].status === 'Available' ? '' : 'out-of-stock' %>">
                            <%= products[i].status==='Available' ? `${products[i].bestOffer}%` : 'Out of Stock' %>
                          </div>
                          <% if (!user) { %>
                            <button type="button" class="wishlist-btn" onclick="handleWishlistClick()">
                              <i class="far fa-heart"></i>
                            </button>
                            <% } else { %>
                              <button type="button"
                                class="wishlist-btn <%= wishlistId && Array.isArray(wishlistId) && wishlistId.includes(products[i]._id.toString()) ? 'active' : '' %>"
                                onclick="addWishlist('<%= products[i]._id %>', this)">
                                <i
                                  class="<%= wishlistId && Array.isArray(wishlistId) && wishlistId.includes(products[i]._id.toString()) ? 'fas' : 'far' %> fa-heart"></i>
                              </button>
                              <% } %>
                  </div>
                  <div class="product-info">
                    <div class="product-brand">PREMIUM</div>
                    <h3 class="product-name">
                      <%= products[i].productName %>
                    </h3>
                    <div class="product-rating">
                      <div class="stars">
                        <i class="fas fa-star star"></i>
                        <i class="fas fa-star star"></i>
                        <i class="fas fa-star star"></i>
                        <i class="fas fa-star star"></i>
                        <i class="fas fa-star star"></i>
                      </div>
                      <span class="rating-count">(247 reviews)</span>
                    </div>
                    <div class="product-prices">
                      <span class="current-price">₹<%= products[i].salesPrice.toLocaleString() %></span> 
                      <span class="original-price">₹<%= products[i].regularPrice.toLocaleString() %></span>
                      <span class="price-savings">Save ₹<%= (products[i].regularPrice -
                          products[i].salesPrice).toFixed(0) %></span>
                    </div>
                    <button type="button" class="add-to-cart" data-id="<%= products[i]._id %>" onclick="addToCart(this)"
                      <%=products[i].status !=='Available' ? 'disabled' : '' %>>
                      <i class="fas fa-shopping-cart"></i>
                      <span>Add to Cart</span>
                    </button>
                  </div>
                  </div>
                </div>
                <% } %>
                  <% } else { %>
                    <div class="no-results">
                      <i class="fas fa-box-open"></i>
                      <h3>No Products Found</h3>
                      <p>Try adjusting your filters or search terms (e.g., gift, candle, romantic)</p>
                    </div>
                    <% } %>
          </div>

          <!-- Pagination -->
          <% if (typeof totalPage !=='undefined' && totalPage>= 1) { %>
            <nav aria-label="Page navigation">
              <ul class="pagination justify-content-center mt-4" id="pagination">
              <% const page=Number(currentPage) || 1; %>
                <% const total=Number(totalPage) || 1; %>
                  <% const searchQuery=typeof search !=='undefined' && search ? encodeURIComponent(search) : '' ; %>
                    <% if (page> 1) { %>
                      <li class="page-item">
                        <a class="page-link" href="?page=<%= page - 1 %><%= searchQuery ? '&amp;search=' + searchQuery : '' %>">Previous</a>
                      </li>
                      <% } else { %>
                        <li class="page-item disabled">
                          <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
                        </li>
                        <% } %>
                          <% for (let i=1; i <=total; i++) { %>
                            <li class="page-item <%= i === page ? 'active' : '' %>">
                              <a class="page-link" href="?page=<%= i %><%= searchQuery ? '&amp;search=' + searchQuery : '' %>"><%= i %></a>
                            </li>
                            <% } %>
                              <% if (page < total) { %>
                                <li class="page-item">
                                  <a class="page-link" href="?page=<%= page + 1 %><%= searchQuery ? '&amp;search=' + searchQuery : '' %>">Next</a>
                                </li>
                                <% } else { %>
                                  <li class="page-item disabled">
                                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Next</a>
                                  </li>
                                  <% } %>
              </ul>
            </nav>
            <% } %>
        </div>
      </main>
      </div>
    </div>
    <%- include('../partials/user/footer.ejs') %>

      <!-- Toast Container -->
      <div id="toastContainer" class="toast-container"></div>

      <!-- Offcanvas Filter for Mobile -->
      <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasFilters" aria-labelledby="offcanvasFiltersLabel">
        <div class="offcanvas-header border-bottom">
          <h5 class="offcanvas-title" id="offcanvasFiltersLabel"><i class="fas fa-filter"></i> Filters</h5>
          <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
          <div class="d-flex flex-column h-100">
            <div class="search-container mb-3">
              <input type="text" id="searchInputMobile" class="form-control search-input" placeholder="Search products..." value="<%= typeof search !== 'undefined' ? search : '' %>">
              <div class="search-actions">
                <button class="search-btn" id="searchBtnMobile" title="Search"><i class="fas fa-search"></i></button>
                <button class="clear-search-btn hidden" id="clearSearchBtnMobile" title="Clear Search"><i class="fas fa-times"></i></button>
              </div>
            </div>
            <div class="filters-grid flex-grow-1">
              <div class="filter-group">
                <label class="filter-label"><i class="fas fa-list"></i> Category</label>
                <select id="categoryFilterMobile" class="filter-select">
                  <option value="">All Categories</option>
                  <% cat.forEach((category)=> { %>
                    <option value="<%= category._id %>" <%=category._id.toString()===categoryFilter ? 'selected' : '' %>><%= category.name %></option>
                  <% }) %>
                </select>
              </div>
              <div class="filter-group">
                <label class="filter-label"><i class="fas fa-dollar-sign"></i> Price Range</label>
                <div class="price-range-container">
                  <input type="number" id="minPriceMobile" class="filter-input" placeholder="Min $" min="0" value="<%= typeof minPrice !== 'undefined' ? minPrice : '' %>">
                  <span class="price-separator">-</span>
                  <input type="number" id="maxPriceMobile" class="filter-input" placeholder="Max $" min="0" value="<%= typeof maxPrice !== 'undefined' ? maxPrice : '' %>">
                </div>
              </div>
              <div class="filter-group">
                <label class="filter-label"><i class="fas fa-sort"></i> Sort By</label>
                <select id="sortByMobile" class="filter-select">
                  <option value="createdAt-desc">Newest First</option>
                  <option value="name-asc">Name: A to Z</option>
                  <option value="name-desc">Name: Z to A</option>
                  <option value="price-asc">Price: Low to High</option>
                  <option value="price-desc">Price: High to Low</option>
                </select>
              </div>
            </div>
            <div class="filter-actions mt-auto">
              <button class="btn btn-primary" id="applyFiltersMobile" title="Apply Filters"><i class="fas fa-check"></i> Apply</button>
              <button class="btn btn-secondary" id="clearFiltersMobile" title="Clear Filters">
                <i class="fas fa-eraser"></i> Clear
              </button>
            </div>
          </div>
        </div>
      </div>

      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



      <script>
        // Initialize wishlistId and isLoggedIn
        window.wishlistId = <%- JSON.stringify(wishlistId || []) %>;
        window.isLoggedIn = <%- !!user %>;

        const offcanvasFilter = new bootstrap.Offcanvas(document.getElementById('offcanvasFilters'));

      </script>
      <script>
        // Sync mobile and desktop filters
        const searchInput = document.getElementById('searchInput');
        const searchInputMobile = document.getElementById('searchInputMobile');
        const searchBtn = document.getElementById('searchBtn');
        const searchBtnMobile = document.getElementById('searchBtnMobile');
        const clearSearchBtn = document.getElementById('clearSearchBtn');
        const clearSearchBtnMobile = document.getElementById('clearSearchBtnMobile');
        const categoryFilter = document.getElementById('categoryFilter');
        const categoryFilterMobile = document.getElementById('categoryFilterMobile');
        const minPrice = document.getElementById('minPrice');
        const maxPrice = document.getElementById('maxPrice');
        const sortBy = document.getElementById('sortBy');
        const sortByMobile = document.getElementById('sortByMobile');
        const minPriceMobile = document.getElementById('minPriceMobile');
        const maxPriceMobile = document.getElementById('maxPriceMobile');
        const applyFiltersBtn = document.getElementById('applyFiltersBtn');
        const clearFiltersBtn = document.getElementById('clearFiltersBtn');
        const applyFiltersMobile = document.getElementById('applyFiltersMobile');
        const resultsCount = document.getElementById('resultsCount');
        const clearFiltersMobile = document.getElementById('clearFiltersMobile');
        const productGrid = document.querySelector('.products-grid');
        const pagination = document.getElementById('pagination');
        const desktopSidebar = document.getElementById('desktopSidebar');
        const closeMobileFilters = document.getElementById('closeMobileFilters');

        let currentPage = parseInt('<%= currentPage || 1 %>');

        // Sync values between mobile and desktop
        function syncFilters() {
          searchInputMobile.value = searchInput.value;
          categoryFilterMobile.value = categoryFilter.value;
          sortByMobile.value = sortBy.value;
          minPriceMobile.value = minPrice.value;
          maxPriceMobile.value = maxPrice.value;
        }

        // Initialize filter inputs with backend values
        minPrice.value = '<%= typeof minPrice !== "undefined" ? minPrice : "" %>';
        maxPrice.value = '<%= typeof maxPrice !== "undefined" ? maxPrice : "" %>';
        sortBy.value = '<%= typeof sort !== "undefined" ? sort : "createdAt-desc" %>';
        syncFilters();

        // Toggle clear search button visibility for both
        function toggleClearSearchBtns() {
          const hasValue = searchInput.value.trim().length > 0;
          clearSearchBtn.classList.toggle('hidden', !hasValue);
          clearSearchBtnMobile.classList.toggle('hidden', !hasValue);
        }

        searchInput.addEventListener('input', () => {
          searchInputMobile.value = searchInput.value;
          toggleClearSearchBtns();
        });
        searchInputMobile.addEventListener('input', () => {
          searchInput.value = searchInputMobile.value;
          toggleClearSearchBtns();
        });
        toggleClearSearchBtns();

        // Debounce function
        const debounce = (func, delay = 400) => {
          let timeout;
          return (...args) => {
            clearTimeout(timeout);
            timeout = setTimeout(() => func(...args), delay);
          };
        };

        const parseFloatSafe = (value, fallback = 0) => {
          const num = parseFloat(value);
          return isNaN(num) ? fallback : num;
        };

        // Fetch products with filters and page
        async function fetchProducts(page = 1) {
          const search = encodeURIComponent(searchInput.value.trim());
          const category = encodeURIComponent(categoryFilter.value || categoryFilterMobile.value);
          const sort = encodeURIComponent(sortBy.value || sortByMobile.value);

          const params = new URLSearchParams({ search, category, sort, page });

          const minInput = minPrice.value.trim() || minPriceMobile.value.trim();
          const maxInput = maxPrice.value.trim() || maxPriceMobile.value.trim();

          const hasMin = minInput !== '';
          const hasMax = maxInput !== '';

          let min = hasMin ? parseFloatSafe(minInput, 0) : null;
          let max = hasMax ? parseFloatSafe(maxInput, 0) : null;

          if (hasMin || hasMax) {
            if (!hasMin) min = 0;
            if (!hasMax) max = 100000;
            if (min > max) [min, max] = [max, min];
            params.append('minPrice', min);
            params.append('maxPrice', max);
          }

          try {
            document.getElementById('products-grid').innerHTML = '<div class="loading">Loading...</div>';
            const res = await fetch(`/viewProducts?${params.toString()}`, {
              headers: { Accept: 'application/json' },
              credentials: 'include'
            });
            if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
            const data = await res.json();
            window.products = data.products; // Store products for re-rendering
            renderProducts(data.products);
            resultsCount.textContent = data.total;
            currentPage = data.page;
            renderPagination(data.page, data.totalPages, params);
          } catch (err) {
            console.error('Error fetching:', err.message);
            document.getElementById('products-grid').innerHTML = `
          <div class="no-results">
            <i class="fas fa-box-open"></i>
            <h3>Error Loading Products</h3>
            <p>Please try again or adjust your filters</p>
          </div>`;
          }
        }

        // Render products
        function renderProducts(products) {
          if (products.length === 0) {
            document.getElementById('products-grid').innerHTML = `
      <div class="no-results">
        <i class="fas fa-box-open"></i>
        <h3>No Products Found</h3>
        <p>Try adjusting your filters or search terms (e.g., gift, candle, romantic)</p>
      </div>`;
            return;
          }

          document.getElementById('products-grid').innerHTML = products.map(p => {
            const inWishlist = Array.isArray(window.wishlistId) && window.wishlistId.includes(p._id);
            const wishlistClass = window.isLoggedIn && inWishlist ? 'active' : '';
            const iconClass = window.isLoggedIn && inWishlist ? 'fas' : 'far';

            return `
      <div class="col-6 col-md-4">
        <div class="product-card h-100" data-id="${p._id}">
          <div class="product-image">
          <a href="/productsDetails/${p._id}">
            <img src="${p.productImage || '/img/placeholder.png'}" alt="${p.productName}" class="product-img" data-id="${p._id}" />
          </a>
          ${p.status === 'Available' ? `
            <div class="discount-badge">${p.bestOffer}%</div>
          ` : `
            <div class="discount-badge out-of-stock">Out of Stock</div>
          `}
          ${window.isLoggedIn ? `
            <button type="button" class="wishlist-btn ${wishlistClass}" onclick="addWishlist('${p._id}', this)" title="Add to Wishlist">
              <i class="${iconClass} fa-heart"></i>
            </button>
          ` : `
            <button type="button" class="wishlist-btn" onclick="handleWishlistClick()" title="Add to Wishlist">
              <i class="far fa-heart"></i>
            </button>
          `}
        </div>
        <div class="product-info">
          <div class="product-brand">PREMIUM</div>
          <h3 class="product-name">${p.productName}</h3>
          <div class="product-rating">
            <div class="stars">
              ${'<i class="fas fa-star star"></i>'.repeat(5)}
            </div>
            <span class="rating-count">(247 reviews)</span>
          </div>
          <div class="product-prices">
            <span class="current-price">₹${p.salesPrice.toLocaleString()}</span>
            <span class="original-price">₹${p.regularPrice.toLocaleString()}</span>
            <span class="price-savings">Save ₹${(p.regularPrice - p.salesPrice).toFixed(0)}</span>
          </div>
          ${p.status === 'Available' ? `
            <button type="button" data-id="${p._id}" onclick="addToCart(this)" class="add-to-cart">
              <i class="fas fa-shopping-cart"></i>
              <span>Add to Cart</span>
            </button>
          ` : `
            <button class="add-to-cart" disabled>
              <i class="fas fa-shopping-cart"></i>
              <span>Add to Cart</span>
            </button>
          `}
          </div>
        </div>
      </div>
    `;
          }).join('');

          attachWishlistListeners();
        }

        // Attach wishlist event listeners
        function attachWishlistListeners() {
          document.querySelectorAll('.wishlist-btn').forEach(btn => {
            btn.removeEventListener('click', handleWishlistClick); // Prevent duplicate listeners
            if (!window.isLoggedIn) {
              btn.addEventListener('click', handleWishlistClick);
            }
          });
        }

        function handleWishlistClick() {
          Swal.fire({
            icon: 'info',
            title: 'Login Required',
            text: 'Please login to add items to your wishlist',
            showCancelButton: true,
            confirmButtonText: 'Login',
            cancelButtonText: 'Cancel'
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = '/login';
            }
          });
        }

        // Render pagination
        function renderPagination(currentPage, totalPages, params) {
          if (!pagination) return;
          params.delete('page');
          const baseQuery = params.toString();
          const baseUrl = `/viewProducts?${baseQuery}`;

          let html = '';
          if (currentPage > 1) {
            html += `<li class="page-item"><a class="page-link" href="${encodeURI(`${baseUrl}&page=${currentPage - 1}`)}">Previous</a></li>`;
          } else {
            html += `<li class="page-item disabled"><a class="page-link" href="#">Previous</a></li>`;
          }

          for (let i = 1; i <= totalPages; i++) {
            html += `<li class="page-item ${i === currentPage ? 'active' : ''}"><a class="page-link" href="${encodeURI(`${baseUrl}&page=${i}`)}">${i}</a></li>`;
          }

          if (currentPage < totalPages) {
            html += `<li class="page-item"><a class="page-link" href="${encodeURI(`${baseUrl}&page=${currentPage + 1}`)}">Next</a></li>`;
          } else {
            html += `<li class="page-item disabled"><a class="page-link" href="#">Next</a></li>`;
          }

          pagination.innerHTML = html;

          document.querySelectorAll('.page-link').forEach(link => {
            link.addEventListener('click', (e) => {
              if (link.parentElement.classList.contains('disabled') || link.parentElement.classList.contains('active')) {
                e.preventDefault();
                return;
              }
              e.preventDefault();
              const url = new URL(link.href, window.location.origin);
              const page = parseInt(url.searchParams.get('page')) || 1;
              fetchProducts(page);
            });
          });
        }

        // Reset filters
        function resetPriceFilters() {
          minPrice.value = '';
          maxPrice.value = '';
          categoryFilter.value = '';
          categoryFilterMobile.value = '';
          sortBy.value = 'createdAt-desc';
          sortByMobile.value = 'createdAt-desc';
          searchInput.value = '';
          minPriceMobile.value = '';
          maxPriceMobile.value = '';
          searchInputMobile.value = '';
          toggleClearSearchBtns();
        }

        // Event listeners for desktop
        searchBtn.addEventListener('click', () => {
          fetchProducts(1);
        });

        searchBtnMobile.addEventListener('click', () => {
          searchInput.value = searchInputMobile.value;
          fetchProducts(1);
        });

        clearSearchBtn.addEventListener('click', () => {
          searchInput.value = '';
          searchInputMobile.value = '';
          toggleClearSearchBtns();
          fetchProducts(1);
        });

        clearSearchBtnMobile.addEventListener('click', () => {
          searchInputMobile.value = '';
          searchInput.value = '';
          toggleClearSearchBtns();
          fetchProducts(1);
        });

        applyFiltersBtn.addEventListener('click', () => {
          fetchProducts(1);
        });

        clearFiltersBtn.addEventListener('click', () => {
          resetPriceFilters();
          fetchProducts(1);
        });

        applyFiltersMobile.addEventListener('click', () => {
          categoryFilter.value = categoryFilterMobile.value;
          sortBy.value = sortByMobile.value;
          minPrice.value = minPriceMobile.value;
          maxPrice.value = maxPriceMobile.value;
          fetchProducts(1);
          offcanvasFilter.hide();
        });

        clearFiltersMobile.addEventListener('click', () => {
          resetPriceFilters();
          fetchProducts(1);
        });

        sortBy.addEventListener('change', () => {
          sortByMobile.value = sortBy.value;
          fetchProducts(1);
        });

        sortByMobile.addEventListener('change', () => {
          sortBy.value = sortByMobile.value;
          fetchProducts(1);
        });

        categoryFilter.addEventListener('change', () => {
          categoryFilterMobile.value = categoryFilter.value;
          fetchProducts(1);
        });

        categoryFilterMobile.addEventListener('change', () => {
          categoryFilter.value = categoryFilterMobile.value;
          fetchProducts(1);
        });

        minPrice.addEventListener('input', () => {
          minPriceMobile.value = minPrice.value;
        });

        maxPrice.addEventListener('input', () => {
          maxPriceMobile.value = maxPrice.value;
        });

        const debouncedFetch = debounce(() => fetchProducts(1), 300);
        searchInput.addEventListener('input', debouncedFetch);
        searchInputMobile.addEventListener('input', debouncedFetch);
        minPrice.addEventListener('input', debouncedFetch);
        maxPrice.addEventListener('input', debouncedFetch);
        categoryFilter.addEventListener('change', () => fetchProducts(1));

        // Wishlist and cart scripts
        const Toast = Swal.mixin({
          toast: true,
          position: 'bottom-end',
          showConfirmButton: false,
          timer: 2000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer);
            toast.addEventListener('mouseleave', Swal.resumeTimer);
          }
        });

        async function addWishlist(productId, button) {
          try {
            const res = await fetch(`/wishlist/add/`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              credentials: 'include', // Ensure cookies are sent
              body: JSON.stringify({ productId })
            });

            const result = await res.json();

            if (result.success) {
              const icon = button.querySelector('i.fa-heart');
              if (result.inWishlist) {
                icon.classList.remove('far');
                icon.classList.add('fas');
                button.classList.add('active');
                if (!window.wishlistId.includes(productId)) {
                  window.wishlistId.push(productId);
                }
              } else {
                icon.classList.remove('fas');
                icon.classList.add('far');
                button.classList.remove('active');
                window.wishlistId = window.wishlistId.filter(id => id !== productId);
              }
              Toast.fire({
                icon: 'success',
                title: result.message || 'Wishlist updated'
              }).then(() => {

                updateCartCount(); // Update cart/wishlist count if applicable
              });
            } else {
              if (result.message === 'user not found') {
                window.isLoggedIn = false; // Update login state
                Swal.fire({
                  icon: 'info',
                  title: 'Login Required',
                  text: 'Please login to continue',
                  showCancelButton: true,
                  confirmButtonText: 'Login',
                  cancelButtonText: 'Cancel'
                }).then((res) => {
                  if (res.isConfirmed) {
                    window.location.href = '/login';
                  }
                });
                return;
              }
              Toast.fire({
                icon: 'error',
                title: result.message || 'Failed to update wishlist'
              });
            }
          } catch (err) {
            console.error('Wishlist error:', err);
            Toast.fire({
              icon: 'error',
              title: 'Server error'
            });
          }
        }

        const CartToast = Swal.mixin({
          toast: true,
          position: 'bottom-end',
          showConfirmButton: false,
          timer: 2000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer);
            toast.addEventListener('mouseleave', Swal.resumeTimer);
          }
        });

        async function addToCart(button) {
          const productId = button.getAttribute('data-id');
          try {
            const response = await fetch('/cart', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              credentials: 'include',
              body: JSON.stringify({ productId, quantity: 1 })
            });
            const data = await response.json();
            if (data.success) {
              CartToast.fire({
                icon: 'success',
                title: data.message || 'Cart updated'
              }).then(() => {
                updateCartCount();
              });
            } else {
              if (data.message === 'User not logged in') {
                window.isLoggedIn = false;
                window.location.href = '/login';
              } else {
                CartToast.fire({
                  icon: 'error',
                  title: data.message || 'Failed to update cart'
                });
              }
            }
          } catch (err) {
            console.error('Cart error:', err);
            CartToast.fire({
              icon: 'error',
              title: 'Server error'
            });
          }
        }

        // Handle product image click for redirect
        document.getElementById('products-grid').addEventListener('click', function (e) {
          const img = e.target.closest('.product-img');
          if (img && img.dataset.id) {
            e.preventDefault();
            window.location.href = `/productsDetails/${img.dataset.id}`;
          }
        });

        fetchProducts(currentPage);
      </script>
</body>

</html>