<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product Listing - Premium Store</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
    integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet" />
   <link rel="stylesheet" href="/css/user/productListing.css">
  <!-- Add custom CSS for toast -->
  <style>
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .toast {
      display: none;
      padding: 12px 16px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      width: 300px;
      animation: slideIn 0.3s ease-out, fadeOut 0.3s ease-in 4s forwards;
    }

    .toast.success {
      border-left: 4px solid #10b981;
    }

    .toast.error {
      border-left: 4px solid #ef4444;
    }

    .toast.show {
      display: flex;
    }

    @keyframes slideIn {
      from {
        transform: translateX(100%);
      }

      to {
        transform: translateX(0);
      }
    }

    @keyframes fadeOut {
      to {
        opacity: 0;
      }
    }
  </style>
</head>

<body>
  <%-include('../partials/user/newheader.ejs') %>

    <div class="container">
      <!-- Sidebar Filters (Desktop) -->
      <aside class="sidebar">
        <nav class="breadcrumb">
          <a href="/home" class="home-breadcrumb" style="color:rgb(73, 73, 73)">Home</a>
          <span class="breadcrumb-separator">/</span>
          <span>Shop</span>
        </nav>

        <div class="filters-section">
          <div class="filters-header">
            <h2 class="filters-title">
              <i class="fas fa-filter"></i>
              Search & Filter
            </h2>
          </div>

          <div class="search-container">
            <input type="text" id="searchInput" class="search-input" placeholder="Search products..."
              value="<%=search%>">
            <div class="search-actions">
              <button class="search-btn" id="searchBtn" title="Search">
                <i class="fas fa-search"></i>
              </button>
              <button class="clear-search-btn" id="clearSearchBtn" title="Clear Search">
                <i class="fas fa-times"></i>
              </button>
            </div>
          </div>

          <div class="filters-grid">
            <div class="filter-group">
              <label class="filter-label">
                <i class="fas fa-list"></i> Category
              </label>
              <select id="categoryFilter" class="filter-select">
                <option value="">All Categories</option>
                <% cat.forEach((category)=> { %>
                  <option value="<%= category._id %>" <%=category._id.toString()===categoryFilter ? 'selected' : '' %>>
                    <%= category.name %>
                  </option>
                  <% }) %>
              </select>
            </div>

            <div class="filter-group">
              <label class="filter-label">
                <i class="fas fa-dollar-sign"></i> Price Range
              </label>
              <div class="price-range-container">
                <input type="number" id="minPrice" class="filter-input" placeholder="Min $" min="0">
                <span class="price-separator">-</span>
                <input type="number" id="maxPrice" class="filter-input" placeholder="Max $" min="0">
              </div>
            </div>

            <div class="filter-group">
              <label class="filter-label">
                <i class="fas fa-sort"></i> Sort By
              </label>
              <select id="sortBy" class="filter-select">
                <option value="createdAt-desc">Newest First</option>
                <option value="name-asc">Name: A to Z</option>
                <option value="name-desc">Name: Z to A</option>
                <option value="price-asc">Price: Low to High</option>
                <option value="price-desc">Price: High to Low</option>
              </select>
            </div>
          </div>

          <div class="filter-actions">
            <button class="btn btn-secondary" id="clearFiltersBtn" title="Clear All Filters">
              <i class="fas fa-eraser"></i>
              Clear
            </button>
            <button class="btn btn-primary" id="applyFiltersBtn" title="Apply Filters">
              <i class="fas fa-check"></i>
              Apply
            </button>
          </div>
        </div>

        <!-- Mobile Filter Toggle -->
        <button class="filter-toggle-btn" id="filterToggleBtn">
          <span><i class="fas fa-filter"></i> Filters</span>
          <i class="fas fa-chevron-down toggle-icon"></i>
        </button>

        <!-- Mobile Filter Panel -->
        <div class="mobile-filter-panel" id="mobileFilterPanel">
          <div class="mobile-filter-content">
            <div class="filter-group">
              <label class="filter-label">
                <i class="fas fa-sort"></i> Sort By
              </label>
              <select id="sortByMobile" class="filter-select">
                <option value="createdAt-desc">Newest First</option>
                <option value="name-asc">Name: A to Z</option>
                <option value="name-desc">Name: Z to A</option>
                <option value="price-asc">Price: Low to High</option>
                <option value="price-desc">Price: High to Low</option>
              </select>
            </div>

            <div class="filter-group">
              <label class="filter-label">
                <i class="fas fa-dollar-sign"></i> Price Range
              </label>
              <div class="price-slider-container">
                <input type="range" id="minPriceSlider" class="price-slider" min="0" max="1000" value="0">
                <input type="range" id="maxPriceSlider" class="price-slider" min="0" max="1000" value="1000">
                <div class="price-values">
                  <span id="minPriceValue">0</span>
                  <span id="maxPriceValue">1000</span>
                </div>
              </div>
            </div>

            <div class="filter-actions">
              <button class="btn btn-secondary" id="clearFiltersMobile" title="Clear Filters" value="1">
                <i class="fas fa-eraser"></i> Clear
              </button>
              <button class="btn btn-primary" id="applyFiltersMobile" title="Apply Filters">
                <i class="fas fa-check"></i> Apply
              </button>
            </div>
          </div>
        </div>
      </aside>

      <!-- Main Content -->
      <main class="main-content">
        <div class="page-header">
        </div>

        <!-- Results Section -->
        <div class="results-section">
          <div class="results-header">
            <div class="results-info">
              Showing <span class="results-count" id="resultsCount">
                <%=totalProduct %>
              </span> products
            </div>
          </div>

          <!-- Products Grid -->
          <div class="products-grid">
            <% if (products && products.length> 0) { %>
              <% for(let i=0; i < products.length; i++) { %>
                <div class="product-card" data-id="<%= products[i]._id %>">
                  <div class="product-image">
                    <% if (products[i].productImage) { %>
                      <a href="/productsDetails/<%= products[i]._id %>">
                        <img src="<%= products[i].productImage %>" alt="<%= products[i].productName %>"
                          class="product-img">
                      </a>
                      <% } else { %>
                        <div
                          style="display: flex; align-items: center; justify-content: center; height: 100%; color: var(--medium-gray); font-size: 1.1rem;">
                          <i class="fas fa-image" style="font-size: 3rem; opacity: 0.3;"></i>
                        </div>
                        <% } %>
                          <div class="discount-badge">-40%</div>
                          <button class="wishlist-btn"><i class="far fa-heart"></i></button>
                          <div class="product-overlay">
                            <div class="quick-actions">
                              <button class="quick-btn">Quick View</button>
                            </div>
                          </div>
                  </div>
                  <div class="product-info">
                    <div class="product-brand">PREMIUM</div>
                    <h3 class="product-name">
                      <%= products[i].productName %>
                    </h3>
                    <div class="product-rating">
                      <div class="stars">
                        <i class="fas fa-star star"></i>
                        <i class="fas fa-star star"></i>
                        <i class="fas fa-star star"></i>
                        <i class="fas fa-star star"></i>
                        <i class="fas fa-star star"></i>
                      </div>
                      <span class="rating-count">(247 reviews)</span>
                    </div>
                    <div class="product-prices">
                      <span class="current-price">₹<%= products[i].salesPrice %></span>
                      <span class="original-price" id="price">₹<%= products[i].regularPrice %></span>
                      <span class="price-savings">Save ₹<%= (products[i].regularPrice -
                          products[i].salesPrice).toFixed(0) %></span>
                    </div>
                    <button type="button" class="add-to-cart" data-id="<%=products[i]._id %>" onclick="addToCart(this)">
                      <i class="fas fa-shopping-cart"></i>
                      <span>Add to Cart</span>
                    </button>
                  </div>
                </div>
                <% } %>
                  <% } else { %>
                    <div style="grid-column: 1 / -1; text-align: center; padding: 3rem; color: var(--medium-gray);">
                      <i class="fas fa-box-open" style="font-size: 4rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                      <p style="font-size: 1.2rem;">No products available</p>
                    </div>
                    <% } %>
          </div>

          <!-- Pagination -->
          <% if (totalPage && totalPage>= 1) { %>
            <div class="pagination" id="pagination">
              <% const page=Number(currentPage) || 1; const total=Number(totalPage) || 1; const searchQuery=typeof
                search !=='undefined' ? encodeURIComponent(search) : '' ; %>
                <% if (page> 1) { %>
                  <a href="?page=<%= page - 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>"
                    class="page-link">Previous</a>
                  <% } else { %>
                    <a class="disabled">Previous</a>
                    <% } %>
                      <% for (let i=1; i <=total; i++) { %>
                        <a href="?page=<%= i %><%= searchQuery ? '&search=' + searchQuery : '' %>" <%=i===page
                          ? 'class="active page-link"' : 'class="page-link"' %>><%= i %></a>
                        <% } %>
                          <% if (page < total) { %>
                            <a href="?page=<%= page + 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>"
                              class="page-link">Next</a>
                            <% } else { %>
                              <a class="disabled">Next</a>
                              <% } %>
            </div>
            <% } %>

        </div>
      </main>
    </div>
    <%-include('../partials/user/footer.ejs') %>

      <!-- Toast Container -->
      <div id="toastContainer" class="toast-container"></div>

      <script>
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');
        const clearSearchBtn = document.getElementById('clearSearchBtn');
        const categoryFilter = document.getElementById('categoryFilter');
        const minPrice = document.getElementById('minPrice');
        const maxPrice = document.getElementById('maxPrice');
        const sortBy = document.getElementById('sortBy');
        const applyFiltersBtn = document.getElementById('applyFiltersBtn');
        const clearFiltersBtn = document.getElementById('clearFiltersBtn');
        const sortByMobile = document.getElementById('sortByMobile');
        const minPriceSlider = document.getElementById('minPriceSlider');
        const maxPriceSlider = document.getElementById('maxPriceSlider');
        const minPriceValue = document.getElementById('minPriceValue');
        const maxPriceValue = document.getElementById('maxPriceValue');
        const applyFiltersMobile = document.getElementById('applyFiltersMobile');
        const clearFiltersMobile = document.getElementById('clearFiltersMobile');
        const resultsCount = document.getElementById('resultsCount');
        const productGrid = document.querySelector('.products-grid');
        const pagination = document.getElementById('pagination');
        const filterToggleBtn = document.getElementById('filterToggleBtn');
        const mobileFilterPanel = document.getElementById('mobileFilterPanel');

        let currentPage = parseInt('<%= currentPage || 1 %>');

        // Initialize filter inputs with backend values
        minPrice.value = '<%= minPrice || "" %>';
        maxPrice.value = '<%= maxPrice || "" %>';
        minPriceSlider.value = parseFloat('<%= minPrice || 0 %>') || 0;
        maxPriceSlider.value = parseFloat('<%= maxPrice || 1000 %>') || 1000;
        sortBy.value = '<%= sort || "name-asc" %>';
        sortByMobile.value = '<%= sort || "name-asc" %>';

        // Debounce function to limit frequent calls
        const debounce = (func, delay = 400) => {
          let timeout;
          return (...args) => {
            clearTimeout(timeout);
            timeout = setTimeout(() => func(...args), delay);
          };
        };

        const parseFloatSafe = (value, fallback = 0) => {
          const num = parseFloat(value);
          return isNaN(num) ? fallback : num;
        };

        // Fetch products with filters and page
        async function fetchProducts(page = 1) {
          const search = searchInput.value.trim();
          const category = categoryFilter.value;
          const sort = sortBy.value || sortByMobile.value || 'name-asc';

          const params = new URLSearchParams({ search, category, sort, page });

          const parseFloatSafe = (value, fallback = 0) => {
            const num = parseFloat(value);
            return isNaN(num) ? fallback : num;
          };

          const minInput = minPrice.value.trim();
          const maxInput = maxPrice.value.trim();

          const hasMin = minInput !== '';
          const hasMax = maxInput !== '';

          let min = hasMin ? parseFloatSafe(minInput, 0) : null;
          let max = hasMax ? parseFloatSafe(maxInput, 0) : null;

          // If either price field is filled, apply filtering
          if (hasMin || hasMax) {
            if (!hasMin) min = 0;
            if (!hasMax) max = 100000; 

            if (min > max) [min, max] = [max, min];

            params.append('minPrice', min);
            params.append('maxPrice', max);
          }

          try {
            productGrid.innerHTML = '<div class="loading">Loading...</div>';
            const res = await fetch(`/viewProducts?${params.toString()}`, {
              headers: { Accept: 'application/json' }
            });
            if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
            const data = await res.json();

            renderProducts(data.products);
            resultsCount.textContent = data.total;
            currentPage = data.page;
            renderPagination(data.page, data.totalPages, params);
          } catch (err) {
            console.error('Error fetching:', err.message);
            productGrid.innerHTML = `
      <div class="no-results">
        <i class="fas fa-box-open"></i>
        <h3>Error Loading Products</h3>
        <p>Please try again or adjust your filters</p>
      </div>`;
          }
        }

        // Render products
        function renderProducts(products) {
          if (products.length === 0) {
            productGrid.innerHTML = `
                      <div class="no-results">
                        <i class="fas fa-box-open"></i>
                        <h3>No Products Found</h3>
                        <p>Try adjusting your filters or search terms (e.g., gift, candle, romantic)</p>
                      </div>`;
            return;
          }

          productGrid.innerHTML = products.map(p => `
                    <div class="product-card" >
                      <div class="product-image">
                        <img src="${p.productImage || '/img/placeholder.png'}" alt="${p.productName}" class="product-img" data-id="${p._id}" />
                        ${p.status === 'Available' ? `
  <div class="discount-badge">-40%</div>
` : `
  <div class="discount-badge out-of-stock">Out of Stock</div>
`}

                        <button class="wishlist-btn" title="Add to Wishlist"><i class="far fa-heart"></i></button>
                      </div>
                      <div class="product-info">
                        <h3 class="product-name">${p.productName}</h3>
                        <div class="product-rating">
                          <div class="stars">
                            ${'<i class="fas fa-star star"></i>'.repeat(5)}
                          </div>
                          <span class="rating-count">(247 reviews)</span>
                        </div>
                        <div class="product-prices">
                          <span class="current-price">₹${p.salesPrice}</span>
                          <span class="original-price">₹${p.regularPrice}</span>
                          <span class="price-savings">Save ₹${(p.regularPrice - p.salesPrice).toFixed(0)}</span>
                        </div>
                        ${p.status === 'Available' ? `
                    <button type="button" data-id="${p._id}" onclick="addToCart(this)" class="add-to-cart">
                      <i class="fas fa-shopping-cart"></i>
                      <span>Add to Cart</span>
                    </button>`: `
                      <button class="add-to-cart" disabled>
                        <i class="fas fa-shopping-cart"></i>
                        <span>Add to Cart</span>
                        </button>`
            }
                      </div>
                    </div>
                  `).join('');
        }

        document.addEventListener('click', function (e) {
          const img = e.target.closest('.product-img');
          if (img && img.dataset.id) {
            window.location.href = `/productsDetails/${img.dataset.id}`;
          }
        });

        // Render pagination
        function renderPagination(currentPage, totalPages, params) {
          if (!pagination) return;
          params.delete('page');
          const baseUrl = `/viewProducts?${params.toString()}`;

          let html = '';
          if (currentPage > 1) {
            html += `<a href="${baseUrl}&page=${currentPage - 1}" class="page-link">Previous</a>`;
          } else {
            html += `<a class="disabled">Previous</a>`;
          }

          for (let i = 1; i <= totalPages; i++) {
            html += `<a href="${baseUrl}&page=${i}" class="${i === currentPage ? 'active page-link' : 'page-link'}">${i}</a>`;
          }

          if (currentPage < totalPages) {
            html += `<a href="${baseUrl}&page=${currentPage + 1}" class="page-link">Next</a>`;
          } else {
            html += `<a class="disabled">Next</a>`;
          }

          pagination.innerHTML = html;

          // Attach event listeners to pagination links
          document.querySelectorAll('.page-link').forEach(link => {
            link.addEventListener('click', (e) => {
              e.preventDefault();
              const url = new URL(link.href);
              const page = parseInt(url.searchParams.get('page')) || 1;
              fetchProducts(page);
            });
          });
        }

        // Update mobile slider values
        function updateSliderValues() {
          minPriceValue.textContent = minPriceSlider.value;
          maxPriceValue.textContent = maxPriceSlider.value;
        }

        // Toggle mobile filter panel
        filterToggleBtn.addEventListener('click', () => {
          mobileFilterPanel.classList.toggle('active');
        });

        function resetPriceFilters() {
          document.getElementById('minPrice').value = '';
          document.getElementById('maxPrice').value = '';
          document.getElementById('minPriceSlider').value = 0;
          document.getElementById('maxPriceSlider').value = 1000;
          document.getElementById('minPriceValue').textContent = '0';
          document.getElementById('maxPriceValue').textContent = '1000';
          document.getElementById('categoryFilter').value = ''
          document.getElementById('sortBy').value = 'createdAt-desc'
        }

        // Event listeners
        searchBtn.addEventListener('click', () => fetchProducts(1));

        clearSearchBtn.addEventListener('click', () => {
          const category = categoryFilter.value;
          const min = minPrice.value;
          const max = maxPrice.value;
          const sort = sortBy.value;

          const params = new URLSearchParams();

          // Keep filters
          if (category) params.set('category', category);
          if (min) params.set('minPrice', min);
          if (max) params.set('maxPrice', max);
          if (sort) params.set('sort', sort);

          params.set('clearSearch', '1');

          fetch(`/viewProducts?${params.toString()}`, {
            headers: { Accept: 'application/json' }
          })
            .then((res) => {
              if (!res.ok) throw new Error("Failed to fetch");
              return res.json();
            })
            .then((data) => {
              renderProducts(data.products);
              resultsCount.textContent = data.total;
              currentPage = data.page;
              renderPagination(data.page, data.totalPages, params);
              searchInput.value = "";
            })
            .catch((err) => {
              console.error("Search clear error:", err.message);
            });
        });

        applyFiltersBtn.addEventListener('click', () => fetchProducts(1));

        clearFiltersBtn.addEventListener('click', () => {
          const params = new URLSearchParams({ clearFilter: 1 })
          fetch(`/viewProducts?${params.toString()}`, {
            headers: { Accept: 'application/json' }
          }).then((res) => {
            if (!res.ok) throw new Error('failed to fetch')

            return res.json()
          }).then((data) => {
            renderProducts(data.products);
            resultsCount.textContent = data.total,
              currentPage = data.page;
            renderPagination(data.page, data.totalPages, params)
            resetPriceFilters()
            updateSliderValues();
          })
        });

        applyFiltersMobile.addEventListener('click', () => fetchProducts(1));
        clearFiltersMobile.addEventListener('click', () => {
          window.location.href = '/viewProducts?clear=1';
        });

        // Sync mobile sort with desktop
        sortBy.addEventListener('change', () => {
          sortByMobile.value = sortBy.value;
          fetchProducts(1);
        });
        sortByMobile.addEventListener('change', () => {
          sortBy.value = sortByMobile.value;
          fetchProducts(1);
        });

        // Sync price sliders with inputs
        minPriceSlider.addEventListener('input', () => {
          minPrice.value = minPriceSlider.value;
          updateSliderValues();
        });
        maxPriceSlider.addEventListener('input', () => {
          maxPrice.value = maxPriceSlider.value;
          updateSliderValues();
        });
        minPrice.addEventListener('input', () => {
          minPriceSlider.value = minPrice.value || 0;
          updateSliderValues();
        });
        maxPrice.addEventListener('input', () => {
          maxPriceSlider.value = maxPrice.value || 1000;
          updateSliderValues();
        });

        // Debounced fetch for real-time input changes
        const debouncedFetch = debounce(() => fetchProducts(1), 300);
        searchInput.addEventListener('input', debouncedFetch);
        minPrice.addEventListener('input', debouncedFetch);
        maxPrice.addEventListener('input', debouncedFetch);
        categoryFilter.addEventListener('change', () => fetchProducts(1));

        // Initialize slider values
        updateSliderValues();

        // Initial fetch
        fetchProducts(currentPage);
      </script>

   
      <script>
        // Show custom toast notification
        function showToast(message, type = 'success') {
          const toastContainer = document.getElementById('toastContainer');
          const toast = document.createElement('div');
          toast.className = `toast ${type}`;

          const icon = type === 'success' ? 'ri-check-line' : 'ri-error-warning-line';
          const iconColor = type === 'success' ? 'text-green-600' : 'text-red-600';

          toast.innerHTML = `
        <div class="flex items-center gap-3">
          <i class="${icon} ${iconColor}"></i>
          <span class="text-gray-900 font-medium">${message}</span>
          <button onclick="this.parentElement.parentElement.remove()" class="ml-auto text-gray-400 hover:text-gray-600">
            <i class="ri-close-line"></i>
          </button>
        </div>
      `;

          toastContainer.appendChild(toast);

          // Show toast
          setTimeout(() => toast.classList.add('show'), 100);

          // Auto remove after 4 seconds
          setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
          }, 4000);
        }

        async function addToCart(button) {
          const productId = button.getAttribute('data-id');

          try {
            const response = await fetch('/cart/addToCart', {
              method: "POST",
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ productId, quantity: 1 })
            });
            const data = await response.json();
            if (data.success) {
              showToast('Product added to cart', 'success');
              updateCartCount()
            } else {
              if (data.message === "User not logged in") {
                window.location.href = '/login';
              }
              showToast(data.message || 'Could not add product to cart', 'error');
            }
          } catch (err) {
            console.error(err);
            showToast('Something went wrong. Please try again.', 'error');
          }
        }
      </script>
</body>

</html>